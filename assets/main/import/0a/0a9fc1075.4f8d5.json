[1,["ceIEWtCPJJhKpcoujDuQmX","50vakI2aNPfKBt6z3oqMVx","fenCFapnpFop3WJrMRAWQ7","64qQDGCJ9FFJWsDRN0ca09","baYEGbWgFEy5DKWUhqYn+Z","abwstieFJFJakN1HRIe4jy","cfBEbEMHxJhInGqUY2klgX","e9PT+pjCFDdYohFLqEBmx3","d4i/EQavtHmLqWEl5VwGyC","34HXnML79K+IFnzC8QM/8t","66sLG/e+FGc5G/nejYM/DQ","45IgjAIexFMbq2TPxRndQl","36K18L77RJEbjTwWQ4VKc9","04bxcsFXRIi7u4ZBWprblt","6dkeWRTOBGXICfYQ7JUBnG"],["node","_material","_mesh","root","_effectAsset","_parent","Camera","KonnbeaObject","scene","Obj","data"],[["cc.Node",["_name","_is3DNode","_id","_trs","_parent","_components","_prefab","_children","_eulerAngles","_contentSize"],0,7,1,9,4,2,5,5],["cc.BufferRange",["length","offset"],1],["cc.BoxCollider3D",["node","_material","_size"],3,1,6,5],["cc.Camera",["_clearFlags","_cullingMask","_fov","_farClip","_ortho","_alignWithScreen","_depth","node","_backgroundColor"],-4,1,5],["cc.Light",["_shadowMaxDepth","_shadowFrustumSize","_shadowType","_type","_intensity","_range","node"],-3,1],["cc.Material",["_name","_techniqueData"],2,11],["cc.Mesh",["_native","_vertexBundles","_primitives","_minPos","_maxPos"],2,9,9,5,5],["cc.mesh.VertexBundle",["verticesCount","data","formats"],2,4,9],["cc.mesh.VertexFormat",["name","type","num"],0],["cc.mesh.Primitive",["vertexBundleIndices","data"],2,4],["cc.SceneAsset",["_name","asyncLoadAssets"],1],["cc.PrefabInfo",["fileId","root"],2,1],["cc.Canvas",["node"],3,1],["cc.Widget",["_alignFlags","node"],2,1],["d7c7bDDlExNA4FeVEY3nA10",["node"],3,1],["28f3aWc+25LW5fF5Bp9Ye6z",["node","Camera"],3,1,1],["12c2fCxno9Brp2Nghd+OjgN",["node","impulse"],3,1,8],["cb4760WqoFDH7BmwHnP1Nzx",["node","KonnbeaObject","Obj"],3,1,1,6],["cc.MeshRenderer",["_receiveShadows","_shadowCastingMode","node","_materials","_mesh"],1,1,3,6],["cc.Scene",["_name","_active","autoReleaseAssets","_children","_anchorPoint","_trs"],0,2,5,7],["cc.Prefab",["_name"],2],["cc.RigidBody3D",["_mass","_linearDamping","_angularDamping","node"],0,1],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.PhysicsMaterial",["_name","_friction","_restitution"],0]],[[11,0,1,2],[2,0,2,1,1],[0,0,1,4,5,6,3,3],[16,0,1,1],[18,0,1,2,3,4,3],[0,0,1,4,5,6,3,8,3],[8,0,1,2,4],[0,0,1,4,7,6,3,8,3],[0,0,1,4,7,6,3,3],[0,0,1,4,5,6,3],[6,0,1,2,3,4,2],[7,0,1,2,2],[1,0,2],[1,1,0,3],[9,0,1,2],[0,0,1,4,5,3,8,3],[5,1,1],[5,0,1,2],[23,0,1,2,4],[10,0,1,3],[0,0,1,7,3,3],[0,0,2,7,5,9,3,3],[0,0,1,4,7,3],[0,0,4,5,9,3,2],[0,0,1,4,5,3],[0,0,1,4,3,3],[0,0,1,5,6,3,3],[12,0,1],[13,0,1,2],[14,0,1],[15,0,1,1],[2,0,1,1],[17,0,1,2,1],[3,1,0,2,3,4,5,7,8,7],[3,0,6,7,3],[19,0,1,2,3,4,5,4],[4,2,0,1,6,4],[4,3,4,5,0,1,6,6],[20,0,2],[21,0,1,2,3,4],[22,0,1,2,4]],[[[[10,".bin",[[11,24,[12,768],[[6,"a_normal",5126,3],[6,"a_position",5126,3],[6,"a_uv0",5126,2]]]],[[14,[0],[13,768,72]]],[1,-0.5,-0.5,-0.5],[1,0.5,0.5,0.5]],-1],0,0,[],[],[]],[[[19,"New Scene",null],[20,"Beruto Konnbea",true,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17],[-4,0,0,0,0,0,1,1,1,1]],[8,"corner",true,1,[-19,-20,-21,-22,-23],[0,"a9Kd4K0hpCC4ojAXIL3tDz",-18],[0,0.5,4,0,0,0,1,1,1,1]],[7,"straight",true,1,[-25,-26,-27,-28,-29],[0,"3dwpZCpsdEkKeal94+0XsD",-24],[0,0.5,2,0,0.7071067811865475,0,0.7071067811865476,1,1,1],[1,0,90,0]],[7,"straight",true,1,[-31,-32,-33,-34,-35],[0,"3dwpZCpsdEkKeal94+0XsD",-30],[0,0.5,-2,0,0.7071067811865475,0,0.7071067811865476,1,1,1],[1,0,90,0]],[7,"straight",true,1,[-37,-38,-39,-40,-41],[0,"3dwpZCpsdEkKeal94+0XsD",-36],[0,0.5,0,0,0.7071067811865475,0,0.7071067811865476,1,1,1],[1,0,90,0]],[8,"straight",true,1,[-43,-44,-45,-46,-47],[0,"3dwpZCpsdEkKeal94+0XsD",-42],[2,0.5,4,0,0,0,1,1,1,1]],[8,"straight",true,1,[-49,-50,-51,-52,-53],[0,"3dwpZCpsdEkKeal94+0XsD",-48],[4,0.5,4,0,0,0,1,1,1,1]],[7,"corner",true,1,[-55,-56,-57,-58,-59],[0,"a9Kd4K0hpCC4ojAXIL3tDz",-54],[6,0.5,4,0,0.7071067811865475,0,0.7071067811865476,1,1,1],[1,0,90,0]],[7,"corner",true,1,[-61,-62,-63,-64,-65],[0,"a9Kd4K0hpCC4ojAXIL3tDz",-60],[6,0.5,2,0,-0.7071067811865475,0,0.7071067811865476,1,1,1],[1,0,-90,0]],[7,"corner",true,1,[-67,-68,-69,-70,-71],[0,"a9Kd4K0hpCC4ojAXIL3tDz",-66],[8,0.5,2,0,0.7071067811865475,0,0.7071067811865476,1,1,1],[1,0,90,0]],[7,"straight",true,1,[-73,-74,-75,-76,-77],[0,"3dwpZCpsdEkKeal94+0XsD",-72],[8,0.5,0,0,0.7071067811865475,0,0.7071067811865476,1,1,1],[1,0,90,0]],[7,"straight",true,1,[-79,-80,-81,-82,-83],[0,"3dwpZCpsdEkKeal94+0XsD",-78],[8,0.5,-2,0,0.7071067811865475,0,0.7071067811865476,1,1,1],[1,0,90,0]],[7,"corner",true,1,[-85,-86,-87,-88,-89],[0,"a9Kd4K0hpCC4ojAXIL3tDz",-84],[8,0.5,-4,0,-1,0,6.123233995736766e-17,1,1,1],[1,0,-180,0]],[8,"straight",true,1,[-91,-92,-93,-94,-95],[0,"3dwpZCpsdEkKeal94+0XsD",-90],[6,0.5,-4,0,0,0,1,1,1,1]],[8,"straight",true,1,[-97,-98,-99,-100,-101],[0,"3dwpZCpsdEkKeal94+0XsD",-96],[4,0.5,-4,0,0,0,1,1,1,1]],[8,"straight",true,1,[-103,-104,-105,-106,-107],[0,"3dwpZCpsdEkKeal94+0XsD",-102],[2,0.5,-4,0,0,0,1,1,1,1]],[7,"corner",true,1,[-109,-110,-111,-112,-113],[0,"a9Kd4K0hpCC4ojAXIL3tDz",-108],[0,0.5,-4,0,-0.7071067811865475,0,0.7071067811865476,1,1,1],[1,0,-90,0]],[21,"Canvas","a5esZu+45LA5mBpvttspPD",[-119,-120],[[27,-114],[28,45,-115],[29,-116],[30,-118,-117]],[5,960,640],[480,320,0,0,0,0,1,1,1,1]],[22,"New 3D Stage",true,18,[-121,-122,-123,-124,-125,1]],[7,"input",true,1,[-127,-128],[0,"41N2P2OPlEmJlSySnXiZ1d",-126],[-2,1.8,2,0,-0.7071067811865475,0,0.7071067811865476,1,1,1],[1,0,-90,0]],[5,"bc",true,20,[[1,-129,[1,2,0.2,2],99],[3,-130,[1,20,0,0]],[32,-132,-131,100]],[0,"celhk/oZdCu53HC/ZIbT7e",20],[0,-0.6,0,0,0.7071067811865475,0,0.7071067811865476,1,1,1],[1,0,90,0]],[15,"3D Camera",true,19,[[33,-1,7,20,1024,false,false,-133,[4,4294962130]]],[20,20,20,-0.27781593346944056,0.36497167621709875,0.11507512748638375,0.8811195706053617,1,1,1],[1,-35,45,0]],[15,"Yuka",true,19,[[4,true,1,-134,[0],1],[1,-135,[1,1,1,0.2],2]],[0,0,0,-0.7071067811865475,0,0,0.7071067811865476,20,20,1],[1,-90,0,0]],[9,"bc",true,2,[[1,-136,[1,2,0.8,2],3],[3,-137,[1,20,0,20]]],[0,"266EmOc5pB0aaLTd3rMhYf",2]],[2,"left konnbea",true,3,[[1,-138,[1,2,0.8,1],9],[3,-139,[1,-5,0,20]]],[0,"5dQ2jTTVBCkr7H8jbvxpEd",3],[0,0,0.5,0,0,0,1,1,1,1]],[2,"right konnbea",true,3,[[1,-140,[1,2,0.8,1],10],[3,-141,[1,5,0,20]]],[0,"76x5NzfftHBI2uM7ACB+nD",3],[0,0,-0.5,0,0,0,1,1,1,1]],[2,"left konnbea",true,4,[[1,-142,[1,2,0.8,1],15],[3,-143,[1,-5,0,20]]],[0,"5dQ2jTTVBCkr7H8jbvxpEd",4],[0,0,0.5,0,0,0,1,1,1,1]],[2,"right konnbea",true,4,[[1,-144,[1,2,0.8,1],16],[3,-145,[1,5,0,20]]],[0,"76x5NzfftHBI2uM7ACB+nD",4],[0,0,-0.5,0,0,0,1,1,1,1]],[2,"left konnbea",true,5,[[1,-146,[1,2,0.8,1],21],[3,-147,[1,-5,0,20]]],[0,"5dQ2jTTVBCkr7H8jbvxpEd",5],[0,0,0.5,0,0,0,1,1,1,1]],[2,"right konnbea",true,5,[[1,-148,[1,2,0.8,1],22],[3,-149,[1,5,0,20]]],[0,"76x5NzfftHBI2uM7ACB+nD",5],[0,0,-0.5,0,0,0,1,1,1,1]],[2,"left konnbea",true,6,[[1,-150,[1,2,0.8,1],27],[3,-151,[1,20,0,-5]]],[0,"5dQ2jTTVBCkr7H8jbvxpEd",6],[0,0,0.5,0,0,0,1,1,1,1]],[2,"right konnbea",true,6,[[1,-152,[1,2,0.8,1],28],[3,-153,[1,20,0,5]]],[0,"76x5NzfftHBI2uM7ACB+nD",6],[0,0,-0.5,0,0,0,1,1,1,1]],[2,"left konnbea",true,7,[[1,-154,[1,2,0.8,1],33],[3,-155,[1,20,0,-5]]],[0,"5dQ2jTTVBCkr7H8jbvxpEd",7],[0,0,0.5,0,0,0,1,1,1,1]],[2,"right konnbea",true,7,[[1,-156,[1,2,0.8,1],34],[3,-157,[1,20,0,5]]],[0,"76x5NzfftHBI2uM7ACB+nD",7],[0,0,-0.5,0,0,0,1,1,1,1]],[9,"bc",true,8,[[1,-158,[1,2,0.8,2],39],[3,-159,[1,20,0,-20]]],[0,"266EmOc5pB0aaLTd3rMhYf",8]],[9,"bc",true,9,[[1,-160,[1,2,0.8,2],45],[3,-161,[1,20,0,-20]]],[0,"266EmOc5pB0aaLTd3rMhYf",9]],[9,"bc",true,10,[[1,-162,[1,2,0.8,2],51],[3,-163,[1,20,0,-20]]],[0,"266EmOc5pB0aaLTd3rMhYf",10]],[2,"left konnbea",true,11,[[1,-164,[1,2,0.8,1],57],[3,-165,[1,-5,0,-20]]],[0,"5dQ2jTTVBCkr7H8jbvxpEd",11],[0,0,0.5,0,0,0,1,1,1,1]],[2,"right konnbea",true,11,[[1,-166,[1,2,0.8,1],58],[3,-167,[1,5,0,-20]]],[0,"76x5NzfftHBI2uM7ACB+nD",11],[0,0,-0.5,0,0,0,1,1,1,1]],[2,"left konnbea",true,12,[[1,-168,[1,2,0.8,1],63],[3,-169,[1,-5,0,-20]]],[0,"5dQ2jTTVBCkr7H8jbvxpEd",12],[0,0,0.5,0,0,0,1,1,1,1]],[2,"right konnbea",true,12,[[1,-170,[1,2,0.8,1],64],[3,-171,[1,5,0,-20]]],[0,"76x5NzfftHBI2uM7ACB+nD",12],[0,0,-0.5,0,0,0,1,1,1,1]],[9,"bc",true,13,[[1,-172,[1,2,0.8,2],69],[3,-173,[1,-20,0,-20]]],[0,"266EmOc5pB0aaLTd3rMhYf",13]],[2,"left konnbea",true,14,[[1,-174,[1,2,0.8,1],75],[3,-175,[1,-20,0,-5]]],[0,"5dQ2jTTVBCkr7H8jbvxpEd",14],[0,0,0.5,0,0,0,1,1,1,1]],[2,"right konnbea",true,14,[[1,-176,[1,2,0.8,1],76],[3,-177,[1,-20,0,5]]],[0,"76x5NzfftHBI2uM7ACB+nD",14],[0,0,-0.5,0,0,0,1,1,1,1]],[2,"left konnbea",true,15,[[1,-178,[1,2,0.8,1],81],[3,-179,[1,-20,0,-5]]],[0,"5dQ2jTTVBCkr7H8jbvxpEd",15],[0,0,0.5,0,0,0,1,1,1,1]],[2,"right konnbea",true,15,[[1,-180,[1,2,0.8,1],82],[3,-181,[1,-20,0,5]]],[0,"76x5NzfftHBI2uM7ACB+nD",15],[0,0,-0.5,0,0,0,1,1,1,1]],[2,"left konnbea",true,16,[[1,-182,[1,2,0.8,1],87],[3,-183,[1,-20,0,-5]]],[0,"5dQ2jTTVBCkr7H8jbvxpEd",16],[0,0,0.5,0,0,0,1,1,1,1]],[2,"right konnbea",true,16,[[1,-184,[1,2,0.8,1],88],[3,-185,[1,-20,0,5]]],[0,"76x5NzfftHBI2uM7ACB+nD",16],[0,0,-0.5,0,0,0,1,1,1,1]],[9,"bc",true,17,[[1,-186,[1,2,0.8,2],93],[3,-187,[1,-20,0,20]]],[0,"266EmOc5pB0aaLTd3rMhYf",17]],[35,"New Node",false,true,[18],[0,0,0],[0,0,0,0,0,0,1,1,1,1]],[23,"Main Camera",18,[[34,7,-1,-188]],[5,960,640],[0,0,554.2562584220408,0,0,0,1,1,1,1]],[15,"New Directional Light",true,19,[[36,4,1000,50,-189]],[20,20,20,-0.24881168918980148,0.4556043372129572,0.08202307901503803,0.850758276917805,1,1,1],[1,-30,55,-5]],[24,"New Ambient Light",true,19,[[37,3,0.25,1,1000,50,-190]]],[25,"Konnbea Object",true,19,[-4,0,0,0,0,0,1,1,1,1]],[2,"pillar",true,2,[[1,-191,[1,0.3,1.3,0.3],4]],[0,"d6nlZ7bw5OtIFw2E9ELGmS",2],[0.8,0,-0.8,0,0,0,1,1,1,1]],[2,"wall",true,2,[[1,-192,[1,2,1.3,0.3],5]],[0,"997PkktuVOnrFB7U0z2HoJ",2],[0,0,0.8,0,0,0,1,1,1,1]],[2,"wall",true,2,[[1,-193,[1,0.3,1.3,2],6]],[0,"cfn8hbLApIn5AqWxQLEzie",2],[-0.8,0,0,0,0,0,1,1,1,1]],[5,"corner",true,2,[[4,true,1,-194,[7],8]],[0,"ab48endJFAwr2sXH6ozMwx",2],[0,0,0,-0.7071068286895765,0,0,0.7071067336835153,100,100,100],[1,-90.00000769819565,0,0]],[2,"wall",true,3,[[1,-195,[1,2,1.3,0.3],11]],[0,"76PnjsuytIYIxni7c/j0DJ",3],[0,0,-0.8,0,0,0,1,1,1,1]],[2,"wall",true,3,[[1,-196,[1,2,1.3,0.3],12]],[0,"977Fh1bBFGw4LNvfLqxSg2",3],[0,0,0.8,0,0,0,1,1,1,1]],[5,"straight",true,3,[[4,true,1,-197,[13],14]],[0,"cexVVt9SRCRr3rxb5UhESc",3],[0,0,0,-0.500000033589714,-0.4999999664102837,-0.5000000335897139,0.4999999664102838,100,100,100],[1,-90.00000769819565,-90,0]],[2,"wall",true,4,[[1,-198,[1,2,1.3,0.3],17]],[0,"76PnjsuytIYIxni7c/j0DJ",4],[0,0,-0.8,0,0,0,1,1,1,1]],[2,"wall",true,4,[[1,-199,[1,2,1.3,0.3],18]],[0,"977Fh1bBFGw4LNvfLqxSg2",4],[0,0,0.8,0,0,0,1,1,1,1]],[5,"straight",true,4,[[4,true,1,-200,[19],20]],[0,"cexVVt9SRCRr3rxb5UhESc",4],[0,0,0,-0.500000033589714,-0.4999999664102837,-0.5000000335897139,0.4999999664102838,100,100,100],[1,-90.00000769819565,-90,0]],[2,"wall",true,5,[[1,-201,[1,2,1.3,0.3],23]],[0,"76PnjsuytIYIxni7c/j0DJ",5],[0,0,-0.8,0,0,0,1,1,1,1]],[2,"wall",true,5,[[1,-202,[1,2,1.3,0.3],24]],[0,"977Fh1bBFGw4LNvfLqxSg2",5],[0,0,0.8,0,0,0,1,1,1,1]],[5,"straight",true,5,[[4,true,1,-203,[25],26]],[0,"cexVVt9SRCRr3rxb5UhESc",5],[0,0,0,-0.500000033589714,-0.4999999664102837,-0.5000000335897139,0.4999999664102838,100,100,100],[1,-90.00000769819565,-90,0]],[2,"wall",true,6,[[1,-204,[1,2,1.3,0.3],29]],[0,"76PnjsuytIYIxni7c/j0DJ",6],[0,0,-0.8,0,0,0,1,1,1,1]],[2,"wall",true,6,[[1,-205,[1,2,1.3,0.3],30]],[0,"977Fh1bBFGw4LNvfLqxSg2",6],[0,0,0.8,0,0,0,1,1,1,1]],[5,"straight",true,6,[[4,true,1,-206,[31],32]],[0,"cexVVt9SRCRr3rxb5UhESc",6],[0,0,0,-0.500000033589714,-0.4999999664102837,-0.5000000335897139,0.4999999664102838,100,100,100],[1,-90.00000769819565,-90,0]],[2,"wall",true,7,[[1,-207,[1,2,1.3,0.3],35]],[0,"76PnjsuytIYIxni7c/j0DJ",7],[0,0,-0.8,0,0,0,1,1,1,1]],[2,"wall",true,7,[[1,-208,[1,2,1.3,0.3],36]],[0,"977Fh1bBFGw4LNvfLqxSg2",7],[0,0,0.8,0,0,0,1,1,1,1]],[5,"straight",true,7,[[4,true,1,-209,[37],38]],[0,"cexVVt9SRCRr3rxb5UhESc",7],[0,0,0,-0.500000033589714,-0.4999999664102837,-0.5000000335897139,0.4999999664102838,100,100,100],[1,-90.00000769819565,-90,0]],[2,"pillar",true,8,[[1,-210,[1,0.3,1.3,0.3],40]],[0,"d6nlZ7bw5OtIFw2E9ELGmS",8],[0.8,0,-0.8,0,0,0,1,1,1,1]],[2,"wall",true,8,[[1,-211,[1,2,1.3,0.3],41]],[0,"997PkktuVOnrFB7U0z2HoJ",8],[0,0,0.8,0,0,0,1,1,1,1]],[2,"wall",true,8,[[1,-212,[1,0.3,1.3,2],42]],[0,"cfn8hbLApIn5AqWxQLEzie",8],[-0.8,0,0,0,0,0,1,1,1,1]],[5,"corner",true,8,[[4,true,1,-213,[43],44]],[0,"ab48endJFAwr2sXH6ozMwx",8],[0,0,0,-0.7071068286895765,0,0,0.7071067336835153,100,100,100],[1,-90.00000769819565,0,0]],[2,"pillar",true,9,[[1,-214,[1,0.3,1.3,0.3],46]],[0,"d6nlZ7bw5OtIFw2E9ELGmS",9],[0.8,0,-0.8,0,0,0,1,1,1,1]],[2,"wall",true,9,[[1,-215,[1,2,1.3,0.3],47]],[0,"997PkktuVOnrFB7U0z2HoJ",9],[0,0,0.8,0,0,0,1,1,1,1]],[2,"wall",true,9,[[1,-216,[1,0.3,1.3,2],48]],[0,"cfn8hbLApIn5AqWxQLEzie",9],[-0.8,0,0,0,0,0,1,1,1,1]],[5,"corner",true,9,[[4,true,1,-217,[49],50]],[0,"ab48endJFAwr2sXH6ozMwx",9],[0,0,0,-0.7071068286895765,0,0,0.7071067336835153,100,100,100],[1,-90.00000769819565,0,0]],[2,"pillar",true,10,[[1,-218,[1,0.3,1.3,0.3],52]],[0,"d6nlZ7bw5OtIFw2E9ELGmS",10],[0.8,0,-0.8,0,0,0,1,1,1,1]],[2,"wall",true,10,[[1,-219,[1,2,1.3,0.3],53]],[0,"997PkktuVOnrFB7U0z2HoJ",10],[0,0,0.8,0,0,0,1,1,1,1]],[2,"wall",true,10,[[1,-220,[1,0.3,1.3,2],54]],[0,"cfn8hbLApIn5AqWxQLEzie",10],[-0.8,0,0,0,0,0,1,1,1,1]],[5,"corner",true,10,[[4,true,1,-221,[55],56]],[0,"ab48endJFAwr2sXH6ozMwx",10],[0,0,0,-0.7071068286895765,0,0,0.7071067336835153,100,100,100],[1,-90.00000769819565,0,0]],[2,"wall",true,11,[[1,-222,[1,2,1.3,0.3],59]],[0,"76PnjsuytIYIxni7c/j0DJ",11],[0,0,-0.8,0,0,0,1,1,1,1]],[2,"wall",true,11,[[1,-223,[1,2,1.3,0.3],60]],[0,"977Fh1bBFGw4LNvfLqxSg2",11],[0,0,0.8,0,0,0,1,1,1,1]],[5,"straight",true,11,[[4,true,1,-224,[61],62]],[0,"cexVVt9SRCRr3rxb5UhESc",11],[0,0,0,-0.500000033589714,-0.4999999664102837,-0.5000000335897139,0.4999999664102838,100,100,100],[1,-90.00000769819565,-90,0]],[2,"wall",true,12,[[1,-225,[1,2,1.3,0.3],65]],[0,"76PnjsuytIYIxni7c/j0DJ",12],[0,0,-0.8,0,0,0,1,1,1,1]],[2,"wall",true,12,[[1,-226,[1,2,1.3,0.3],66]],[0,"977Fh1bBFGw4LNvfLqxSg2",12],[0,0,0.8,0,0,0,1,1,1,1]],[5,"straight",true,12,[[4,true,1,-227,[67],68]],[0,"cexVVt9SRCRr3rxb5UhESc",12],[0,0,0,-0.500000033589714,-0.4999999664102837,-0.5000000335897139,0.4999999664102838,100,100,100],[1,-90.00000769819565,-90,0]],[2,"pillar",true,13,[[1,-228,[1,0.3,1.3,0.3],70]],[0,"d6nlZ7bw5OtIFw2E9ELGmS",13],[0.8,0,-0.8,0,0,0,1,1,1,1]],[2,"wall",true,13,[[1,-229,[1,2,1.3,0.3],71]],[0,"997PkktuVOnrFB7U0z2HoJ",13],[0,0,0.8,0,0,0,1,1,1,1]],[2,"wall",true,13,[[1,-230,[1,0.3,1.3,2],72]],[0,"cfn8hbLApIn5AqWxQLEzie",13],[-0.8,0,0,0,0,0,1,1,1,1]],[5,"corner",true,13,[[4,true,1,-231,[73],74]],[0,"ab48endJFAwr2sXH6ozMwx",13],[0,0,0,-0.7071068286895765,0,0,0.7071067336835153,100,100,100],[1,-90.00000769819565,0,0]],[2,"wall",true,14,[[1,-232,[1,2,1.3,0.3],77]],[0,"76PnjsuytIYIxni7c/j0DJ",14],[0,0,-0.8,0,0,0,1,1,1,1]],[2,"wall",true,14,[[1,-233,[1,2,1.3,0.3],78]],[0,"977Fh1bBFGw4LNvfLqxSg2",14],[0,0,0.8,0,0,0,1,1,1,1]],[5,"straight",true,14,[[4,true,1,-234,[79],80]],[0,"cexVVt9SRCRr3rxb5UhESc",14],[0,0,0,-0.500000033589714,-0.4999999664102837,-0.5000000335897139,0.4999999664102838,100,100,100],[1,-90.00000769819565,-90,0]],[2,"wall",true,15,[[1,-235,[1,2,1.3,0.3],83]],[0,"76PnjsuytIYIxni7c/j0DJ",15],[0,0,-0.8,0,0,0,1,1,1,1]],[2,"wall",true,15,[[1,-236,[1,2,1.3,0.3],84]],[0,"977Fh1bBFGw4LNvfLqxSg2",15],[0,0,0.8,0,0,0,1,1,1,1]],[5,"straight",true,15,[[4,true,1,-237,[85],86]],[0,"cexVVt9SRCRr3rxb5UhESc",15],[0,0,0,-0.500000033589714,-0.4999999664102837,-0.5000000335897139,0.4999999664102838,100,100,100],[1,-90.00000769819565,-90,0]],[2,"wall",true,16,[[1,-238,[1,2,1.3,0.3],89]],[0,"76PnjsuytIYIxni7c/j0DJ",16],[0,0,-0.8,0,0,0,1,1,1,1]],[2,"wall",true,16,[[1,-239,[1,2,1.3,0.3],90]],[0,"977Fh1bBFGw4LNvfLqxSg2",16],[0,0,0.8,0,0,0,1,1,1,1]],[5,"straight",true,16,[[4,true,1,-240,[91],92]],[0,"cexVVt9SRCRr3rxb5UhESc",16],[0,0,0,-0.500000033589714,-0.4999999664102837,-0.5000000335897139,0.4999999664102838,100,100,100],[1,-90.00000769819565,-90,0]],[2,"pillar",true,17,[[1,-241,[1,0.3,1.3,0.3],94]],[0,"d6nlZ7bw5OtIFw2E9ELGmS",17],[0.8,0,-0.8,0,0,0,1,1,1,1]],[2,"wall",true,17,[[1,-242,[1,2,1.3,0.3],95]],[0,"997PkktuVOnrFB7U0z2HoJ",17],[0,0,0.8,0,0,0,1,1,1,1]],[2,"wall",true,17,[[1,-243,[1,0.3,1.3,2],96]],[0,"cfn8hbLApIn5AqWxQLEzie",17],[-0.8,0,0,0,0,0,1,1,1,1]],[5,"corner",true,17,[[4,true,1,-244,[97],98]],[0,"ab48endJFAwr2sXH6ozMwx",17],[0,0,0,-0.7071068286895765,0,0,0.7071067336835153,100,100,100],[1,-90.00000769819565,0,0]],[5,"input",true,20,[[4,true,1,-245,[101],102]],[0,"30wySGxI9Km4FyI36eVJ9X",20],[0,0,0,-0.7071068286895765,0,0,0.7071067336835153,100,100,100],[1,-90.00000769819565,0,0]]],0,[0,-1,2,0,-2,3,0,-3,4,0,-4,5,0,-5,6,0,-6,7,0,-7,8,0,-8,9,0,-9,10,0,-10,11,0,-11,12,0,-12,13,0,-13,14,0,-14,15,0,-15,16,0,-16,17,0,-17,20,0,3,2,0,-1,24,0,-2,55,0,-3,56,0,-4,57,0,-5,58,0,3,3,0,-1,25,0,-2,26,0,-3,59,0,-4,60,0,-5,61,0,3,4,0,-1,27,0,-2,28,0,-3,62,0,-4,63,0,-5,64,0,3,5,0,-1,29,0,-2,30,0,-3,65,0,-4,66,0,-5,67,0,3,6,0,-1,31,0,-2,32,0,-3,68,0,-4,69,0,-5,70,0,3,7,0,-1,33,0,-2,34,0,-3,71,0,-4,72,0,-5,73,0,3,8,0,-1,35,0,-2,74,0,-3,75,0,-4,76,0,-5,77,0,3,9,0,-1,36,0,-2,78,0,-3,79,0,-4,80,0,-5,81,0,3,10,0,-1,37,0,-2,82,0,-3,83,0,-4,84,0,-5,85,0,3,11,0,-1,38,0,-2,39,0,-3,86,0,-4,87,0,-5,88,0,3,12,0,-1,40,0,-2,41,0,-3,89,0,-4,90,0,-5,91,0,3,13,0,-1,42,0,-2,92,0,-3,93,0,-4,94,0,-5,95,0,3,14,0,-1,43,0,-2,44,0,-3,96,0,-4,97,0,-5,98,0,3,15,0,-1,45,0,-2,46,0,-3,99,0,-4,100,0,-5,101,0,3,16,0,-1,47,0,-2,48,0,-3,102,0,-4,103,0,-5,104,0,3,17,0,-1,49,0,-2,105,0,-3,106,0,-4,107,0,-5,108,0,0,18,0,0,18,0,0,18,0,6,22,0,0,18,0,-1,51,0,-2,19,0,-1,22,0,-2,52,0,-3,53,0,-4,23,0,-5,54,0,3,20,0,-1,21,0,-2,109,0,0,21,0,0,21,0,7,54,0,0,21,0,0,22,0,0,23,0,0,23,0,0,24,0,0,24,0,0,25,0,0,25,0,0,26,0,0,26,0,0,27,0,0,27,0,0,28,0,0,28,0,0,29,0,0,29,0,0,30,0,0,30,0,0,31,0,0,31,0,0,32,0,0,32,0,0,33,0,0,33,0,0,34,0,0,34,0,0,35,0,0,35,0,0,36,0,0,36,0,0,37,0,0,37,0,0,38,0,0,38,0,0,39,0,0,39,0,0,40,0,0,40,0,0,41,0,0,41,0,0,42,0,0,42,0,0,43,0,0,43,0,0,44,0,0,44,0,0,45,0,0,45,0,0,46,0,0,46,0,0,47,0,0,47,0,0,48,0,0,48,0,0,49,0,0,49,0,0,51,0,0,52,0,0,53,0,0,55,0,0,56,0,0,57,0,0,58,0,0,59,0,0,60,0,0,61,0,0,62,0,0,63,0,0,64,0,0,65,0,0,66,0,0,67,0,0,68,0,0,69,0,0,70,0,0,71,0,0,72,0,0,73,0,0,74,0,0,75,0,0,76,0,0,77,0,0,78,0,0,79,0,0,80,0,0,81,0,0,82,0,0,83,0,0,84,0,0,85,0,0,86,0,0,87,0,0,88,0,0,89,0,0,90,0,0,91,0,0,92,0,0,93,0,0,94,0,0,95,0,0,96,0,0,97,0,0,98,0,0,99,0,0,100,0,0,101,0,0,102,0,0,103,0,0,104,0,0,105,0,0,106,0,0,107,0,0,108,0,0,109,0,8,50,1,5,19,18,5,50,245],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,2,1,1,1,1,1,-1,2,1,1,1,1,-1,2,1,1,1,1,-1,2,1,1,1,1,-1,2,1,1,1,1,-1,2,1,1,1,1,-1,2,1,1,1,1,-1,2,1,1,1,1,-1,2,1,1,1,1,-1,2,1,1,1,1,-1,2,1,1,1,1,-1,2,1,1,1,1,-1,2,1,1,1,1,-1,2,1,1,1,1,-1,2,1,1,1,1,-1,2,1,1,1,1,-1,2,1,9,-1,2],[6,7,8,0,0,0,0,3,4,0,0,0,0,1,2,0,0,0,0,1,2,0,0,0,0,1,2,0,0,0,0,1,2,0,0,0,0,1,2,0,0,0,0,3,4,0,0,0,0,3,4,0,0,0,0,3,4,0,0,0,0,1,2,0,0,0,0,1,2,0,0,0,0,3,4,0,0,0,0,1,2,0,0,0,0,1,2,0,0,0,0,1,2,0,0,0,0,3,4,0,9,10,11]],[[[38,"Box"],[26,"Box",true,[[4,true,1,-2,[0],1],[39,5,0.9,0,-3],[31,-4,2]],[0,"02QyTQQXNBerzSApyPQLA9",-1],[0,2,0,0,0,0,1,0.5,0.5,0.5]]],0,[0,3,1,0,0,1,0,0,1,0,0,1,0,10,1,4],[0,0,0],[-1,2,1],[12,13,0]],[[[17,"BoxMaterial",[{},"0",11,[{"defines":{"OUTPUT_TO_GAMMA":false}},"props",11,[{},"diffuseColor",8,[4,4278229503]]]]]],0,0,[0],[4],[5]],[[[10,".bin",[[11,330,[12,10560],[[6,"a_normal",5126,3],[6,"a_position",5126,3],[6,"a_uv0",5126,2]]]],[[14,[0],[13,10560,2592]]],[1,-0.00999999977648258,-0.00999999977648258,-0.00999999977648258],[1,0.00999999977648258,0.00999999977648258,0.00999999977648258]],-1],0,0,[],[],[]],[[[16,[{},"0",11,[{"defines":{"OUTPUT_TO_GAMMA":false}},"props",11,[{},"diffuseColor",8,[4,4294955165]]]]]],0,0,[0],[4],[5]],[[[16,[{},"0",11,[{"defines":{"OUTPUT_TO_GAMMA":false,"USE_NORMAL_TEXTURE":false,"USE_EMISSIVE":false,"USE_EMISSIVE_TEXTURE":true,"USE_SPECULAR":false,"USE_SPECULAR_TEXTURE":true,"USE_DIFFUSE_TEXTURE":false,"USE_ALPHA_TEST":false}},"props",11,[{},"diffuseColor",8,[4,4288216984]]]]]],0,0,[0],[4],[5]],[[[16,[{},"0",11,[{"defines":{}},"props",11,[{},"diffuseColor",8,[4,4290295992]]]]]],0,0,[0],[4],[5]],[[[40,"builtin-phong",[{"hash":3560892936,"record":null,"name":"builtin-phong|phong-vs|phong-fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n#if CC_USE_SKINNING\n  in vec4 a_weights;\n  in vec4 a_joints;\n  #if CC_USE_JOINTS_TEXTRUE\n    uniform SKINNING {\n      vec2 jointsTextureSize;\n    };\n    uniform sampler2D jointsTexture;\n    #if CC_JOINTS_TEXTURE_FLOAT32\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 4.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = texture(jointsTexture, vec2(dx * (x + 0.5), y));\n        vec4 v2 = texture(jointsTexture, vec2(dx * (x + 1.5), y));\n        vec4 v3 = texture(jointsTexture, vec2(dx * (x + 2.5), y));\n        vec4 v4 = texture(jointsTexture, vec2(dx * (x + 3.5), y));\n        return mat4(v1, v2, v3, v4);\n      }\n    #else\n      float decode32(vec4 rgba) {\n        float Sign = 1.0 - step(128.0, rgba[0]) * 2.0;\n        float Exponent = 2.0 * mod(rgba[0], 128.0) + step(128.0, rgba[1]) - 127.0;\n        float Mantissa = mod(rgba[1], 128.0) * 65536.0 + rgba[2] * 256.0 + rgba[3] + 8388608.0;\n        return Sign * exp2(Exponent - 23.0) * Mantissa;\n      }\n      vec4 decodevec4 (vec4 x, vec4 y, vec4 z, vec4 w) {\n        return vec4(\n          decode32(x.wzyx * 255.0),\n          decode32(y.wzyx * 255.0),\n          decode32(z.wzyx * 255.0),\n          decode32(w.wzyx * 255.0)\n        );\n      }\n      vec4 decodevec4 (float dx, float x, float y) {\n        return decodevec4(\n          texture(jointsTexture, vec2(dx * (x + 0.5), y)),\n          texture(jointsTexture, vec2(dx * (x + 1.5), y)),\n          texture(jointsTexture, vec2(dx * (x + 2.5), y)),\n          texture(jointsTexture, vec2(dx * (x + 3.5), y))\n        );\n      }\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 16.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = decodevec4(dx, x,       y);\n        vec4 v2 = decodevec4(dx, x+4.0,   y);\n        vec4 v3 = decodevec4(dx, x+8.0,   y);\n        vec4 v4 = decodevec4(dx, x+12.0,  y);\n        return mat4(v1, v2, v3, v4);\n      }\n    #endif\n  #else\n    uniform JOINT_MATRIX {\n      mat4 jointMatrices[50];\n    };\n    mat4 getBoneMatrix(const in float i) {\n      return jointMatrices[int(i)];\n    }\n  #endif\n    mat4 skinMatrix() {\n      return\n        getBoneMatrix(a_joints.x) * a_weights.x +\n        getBoneMatrix(a_joints.y) * a_weights.y +\n        getBoneMatrix(a_joints.z) * a_weights.z +\n        getBoneMatrix(a_joints.w) * a_weights.w\n        ;\n    }\n#endif\nstruct StandardVertInput {\n  vec2 uv;\n  vec4 position;\n  vec3 normal;\n  vec4 tangent;\n  vec4 color;\n};\nin vec3 a_position;\n#if CC_USE_ATTRIBUTE_UV0\nin vec2 a_uv0;\n#endif\n#if CC_USE_ATTRIBUTE_COLOR\nin vec4 a_color;\n#endif\n#if CC_USE_ATTRIBUTE_NORMAL\nin vec3 a_normal;\n#endif\n#if CC_USE_ATTRIBUTE_TANGENT\nin vec4 a_tangent;\n#endif\nvoid CCAttribute (out StandardVertInput In) {\n  In.position = vec4(a_position, 1.0);\n  #if CC_USE_ATTRIBUTE_UV0\n    In.uv = a_uv0;\n  #else\n    In.uv = vec2(0.0);\n  #endif\n  #if CC_USE_ATTRIBUTE_COLOR\n    In.color = a_color;\n  #else\n    In.color = vec4(1.0);\n  #endif\n  #if CC_USE_ATTRIBUTE_NORMAL\n    In.normal = a_normal;\n  #else\n    In.normal = vec3(0.0, 1.0, 0.0);\n  #endif\n  #if CC_USE_ATTRIBUTE_TANGENT\n    In.tangent = a_tangent;\n  #else\n    In.tangent = vec4(1.0, 0.0, 0.0, 0.0);\n  #endif\n}\nvoid CCVertInput(out StandardVertInput In) {\n  CCAttribute(In);\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    In.position = m * In.position;\n    #if CC_USE_ATTRIBUTE_NORMAL\n      In.normal = (m * vec4(In.normal, 0)).xyz;\n    #endif\n    #if CC_USE_ATTRIBUTE_TANGENT\n      In.tangent = m * In.tangent;\n    #endif\n  #endif\n}\n#if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n  uniform CC_SHADOW {\n    mat4 cc_shadow_lightViewProjMatrix[2];\n    vec4 cc_shadow_info[2];\n  };\n  #if CC_NUM_SHADOW_LIGHTS > 0\n    uniform sampler2D cc_shadow_map_0;\n  #endif\n  #if CC_NUM_SHADOW_LIGHTS > 1\n    uniform sampler2D cc_shadow_map_1;\n  #endif\n  varying vec4 v_posLightSpace[2];\n  varying float v_depth[2];\n#endif\nvoid CCShadowInput (vec3 worldPos) {\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n  for (int i = 0; i < CC_NUM_SHADOW_LIGHTS; i++) {\n    v_posLightSpace[i] = cc_shadow_lightViewProjMatrix[i] * vec4(worldPos, 1.0);\n    v_depth[i] = (v_posLightSpace[i].z + cc_shadow_info[i].x) / (cc_shadow_info[i].x + cc_shadow_info[i].y);\n  }\n  #endif\n}\nuniform MAIN_TILING {\n  vec2 mainTiling;\n  vec2 mainOffset;\n};\n#if CC_USE_ATTRIBUTE_UV0 && (USE_DIFFUSE_TEXTURE || USE_EMISSIVE_TEXTURE || USE_SPECULAR_TEXTURE || USE_NORMAL_TEXTURE)\n  out mediump vec2 v_uv0;\n#endif\n#if CC_USE_ATTRIBUTE_COLOR\n  out lowp vec4 v_color;\n#endif\n#if USE_NORMAL_TEXTURE\n  out vec3 v_tangent;\n  out vec3 v_bitangent;\n#endif\nout vec3 v_worldNormal;\nout vec3 v_worldPos;\nout vec3 v_viewDirection;\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  vec4 position = In.position;\n  v_worldNormal = normalize((cc_matWorldIT * vec4(In.normal, 0)).xyz);\n  v_worldPos = (cc_matWorld * position).xyz;\n  v_viewDirection = normalize(cc_cameraPos.xyz - v_worldPos);\n  #if CC_USE_ATTRIBUTE_UV0 && (USE_DIFFUSE_TEXTURE || USE_EMISSIVE_TEXTURE || USE_SPECULAR_TEXTURE || USE_NORMAL_TEXTURE)\n    v_uv0 = In.uv * mainTiling + mainOffset;\n  #endif\n  #if CC_USE_ATTRIBUTE_COLOR\n    v_color = In.color;\n  #endif\n  #if USE_NORMAL_TEXTURE\n    v_tangent = normalize((cc_matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_worldNormal, v_tangent) * In.tangent.w;\n  #endif\n  CCShadowInput(v_worldPos);\n  gl_Position = cc_matViewProj * cc_matWorld * position;\n}","frag":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nvec4 CCFragOutput (vec4 color) {\n  #if OUTPUT_TO_GAMMA\n    color.rgb = sqrt(color.rgb);\n  #endif\n\treturn color;\n}\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform PhongFrag {\n  lowp vec4 diffuseColor;\n  lowp vec4 specularColor;\n  lowp vec4 emissiveColor;\n  float glossiness;\n};\n#if USE_DIFFUSE_TEXTURE\n  uniform sampler2D diffuseTexture;\n#endif\n#if USE_SPECULAR && USE_SPECULAR_TEXTURE\n  uniform sampler2D specularTexture;\n#endif\n#if USE_EMISSIVE && USE_EMISSIVE_TEXTURE\n  uniform sampler2D emissiveTexture;\n#endif\n#if USE_NORMAL_TEXTURE\n  in vec3 v_tangent;\n  in vec3 v_bitangent;\n  uniform sampler2D normalTexture;\n#endif\nin vec3 v_worldNormal;\nin vec3 v_worldPos;\nin vec3 v_viewDirection;\n#if CC_USE_ATTRIBUTE_UV0 && (USE_DIFFUSE_TEXTURE || (USE_EMISSIVE && USE_EMISSIVE_TEXTURE) || (USE_SPECULAR && USE_SPECULAR_TEXTURE) || USE_NORMAL_TEXTURE)\n  in mediump vec2 v_uv0;\n#endif\n#if CC_USE_ATTRIBUTE_COLOR\n  in lowp vec4 v_color;\n#endif\n#if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n  uniform CC_SHADOW {\n    mat4 cc_shadow_lightViewProjMatrix[2];\n    vec4 cc_shadow_info[2];\n  };\n  #if CC_NUM_SHADOW_LIGHTS > 0\n    uniform sampler2D cc_shadow_map_0;\n  #endif\n  #if CC_NUM_SHADOW_LIGHTS > 1\n    uniform sampler2D cc_shadow_map_1;\n  #endif\n  varying vec4 v_posLightSpace[2];\n  varying float v_depth[2];\n#endif\nfloat unpackRGBAToDepth(vec4 color) {\n  return dot(color, vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n}\nfloat getDepth(sampler2D shadowMap, vec2 shadowUV) {\n    return unpackRGBAToDepth(texture(shadowMap, shadowUV));\n}\nfloat computeFallOff(float shadow, vec2 coords, float frustumEdgeFalloff) {\n  return shadow;\n}\nfloat shadowSimple(sampler2D shadowMap, vec2 shadowUV, float currentDepth, float darkness) {\n  float closestDepth = getDepth(shadowMap, shadowUV);\n  return currentDepth > closestDepth  ? 1.0 - darkness : 1.0;\n}\nfloat shadowPCF3X3(sampler2D shadowMap, vec2 shadowUV, float currentDepth, float darkness, float shadowSize) {\n  float shadow = 0.0;\n  for (int x = -1; x <= 1; ++x) {\n    for (int y = -1; y <= 1; ++y) {\n      float closestDepth = getDepth(shadowMap, shadowUV + vec2(x, y) * 1.0/shadowSize);\n      shadow += currentDepth > closestDepth  ? 1.0 - darkness : 1.0;\n    }\n  }\n  shadow /= 9.0;\n  return shadow;\n}\nfloat shadowPCF5X5(sampler2D shadowMap, vec2 shadowUV, float currentDepth, float darkness, float shadowSize) {\n  float shadow = 0.0;\n  for (int x = -2; x <= 2; ++x) {\n    for (int y = -2; y <= 2; ++y) {\n      float closestDepth = getDepth(shadowMap, shadowUV + vec2(x, y) * 1.0/shadowSize);\n      shadow += currentDepth > closestDepth  ? 1.0 - darkness : 1.0;\n    }\n  }\n  shadow /= 25.0;\n  return shadow;\n}\n#if CC_NUM_LIGHTS > 0\nuniform CCLIGHTS {\n  vec4 cc_lightPositionAndRange[4];\n  vec4 cc_lightDirection[4];\n  vec4 cc_lightColor[4];\n};\n#endif\nstruct LightInfo {\n  vec3 lightDir;\n  vec3 radiance;\n  vec4 lightColor;\n};\nLightInfo computeDirectionalLighting(\n  vec4 lightDirection,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  ret.lightDir = -normalize(lightDirection.xyz);\n  ret.radiance = lightColor.rgb;\n  ret.lightColor = lightColor;\n  return ret;\n}\nLightInfo computePointLighting(\n  vec3 worldPosition,\n  vec4 lightPositionAndRange,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  vec3 lightDir = lightPositionAndRange.xyz - worldPosition;\n  float attenuation = max(0., 1.0 - length(lightDir) / lightPositionAndRange.w);\n  ret.lightDir = normalize(lightDir);\n  ret.radiance = lightColor.rgb * attenuation;\n  ret.lightColor = lightColor;\n  return ret;\n}\nLightInfo computeSpotLighting(\n  vec3 worldPosition,\n  vec4 lightPositionAndRange,\n  vec4 lightDirection,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  vec3 lightDir = lightPositionAndRange.xyz - worldPosition;\n  float attenuation = max(0., 1.0 - length(lightDir) / lightPositionAndRange.w);\n  lightDir = normalize(lightDir);\n  float cosConeAngle = max(0., dot(lightDirection.xyz, -lightDir));\n  cosConeAngle = cosConeAngle < lightDirection.w ? 0. : cosConeAngle;\n  cosConeAngle = pow(cosConeAngle, lightColor.w);\n  ret.lightDir = lightDir;\n  ret.radiance = lightColor.rgb * attenuation * cosConeAngle;\n  ret.lightColor = lightColor;\n  return ret;\n}\nstruct Lighting {\n  vec3 diffuse;\n  vec3 specular;\n};\nstruct PhongSurface {\n  vec3 diffuse;\n  vec3 emissive;\n  vec3 specular;\n  float opacity;\n  float glossiness;\n  vec3 position;\n  vec3 normal;\n  vec3 viewDirection;\n};\nLighting brdf (PhongSurface s, LightInfo info) {\n  Lighting result;\n  float ndh = 0.0;\n  vec3 halfDir = normalize(s.viewDirection + info.lightDir);\n  float NdotH = max(0.0, dot(s.normal, halfDir));\n  NdotH = pow(NdotH, max(1.0, s.glossiness * 128.0));\n  result.diffuse = info.radiance * max(0.0, dot(s.normal, info.lightDir));\n  result.specular = info.radiance * NdotH;\n  return result;\n}\nvec4 composePhongShading (Lighting lighting, PhongSurface s) {\n  vec4 o = vec4(0.0, 0.0, 0.0, 1.0);\n  o.rgb = lighting.diffuse * s.diffuse;\n  #if USE_EMISSIVE\n    o.rgb += s.emissive;\n  #endif\n  #if USE_SPECULAR\n    o.rgb += lighting.specular * s.specular;\n  #endif\n  o.a = s.opacity;\n  return o;\n}\nvec3 ambient(PhongSurface s, vec4 ambientColor) {\n  return s.diffuse * ambientColor.rgb;\n}\nvec4 CCPhongShading (in PhongSurface s) {\n  Lighting result;\n  result.diffuse = vec3(0, 0, 0);\n  result.specular = vec3(0, 0, 0);\n  #if CC_NUM_LIGHTS > 0\n    #if CC_LIGHT_0_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[0]);\n    #else\n      LightInfo info0;\n      #if CC_LIGHT_0_TYPE == 0\n        info0 = computeDirectionalLighting(cc_lightDirection[0], cc_lightColor[0]);\n      #elif CC_LIGHT_0_TYPE == 1\n        info0 = computePointLighting(s.position, cc_lightPositionAndRange[0], cc_lightColor[0]);\n      #elif CC_LIGHT_0_TYPE == 2\n        info0 = computeSpotLighting(s.position, cc_lightPositionAndRange[0], cc_lightDirection[0], cc_lightColor[0]);\n      #endif\n      Lighting result0 = brdf(s, info0);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n    float shadow_0 = 1.0;\n    vec2 projCoords0 = v_posLightSpace[0].xy / v_posLightSpace[0].w;\n    vec2 shadowUV0 = projCoords0 * 0.5 + vec2(0.5);\n    if (shadowUV0.x >= 0.0 && shadowUV0.x <= 1.0 && shadowUV0.y >= 0.0 && shadowUV0.y <= 1.0) {\n      float currentDepth0 = clamp(v_depth[0], 0.0, 1.0);\n      #if CC_SHADOW_0_TYPE == 3\n        shadow_0 = shadowPCF3X3(cc_shadow_map_0, shadowUV0, currentDepth0, cc_shadow_info[0].w, cc_shadow_info[0].z);\n      #elif CC_SHADOW_0_TYPE == 4\n        shadow_0 = shadowPCF5X5(cc_shadow_map_0, shadowUV0, currentDepth0, cc_shadow_info[0].w, cc_shadow_info[0].z);\n      #else\n        shadow_0 = shadowSimple(cc_shadow_map_0, shadowUV0, currentDepth0, cc_shadow_info[0].w);\n      #endif\n      shadow_0 = computeFallOff(shadow_0, projCoords0, 0.0);\n    }\n    result0.diffuse *= shadow_0;\n    result0.specular *= shadow_0;\n  #endif\n      result.diffuse += result0.diffuse;\n      result.specular += result0.specular;\n    #endif\n  #endif\n  #if CC_NUM_LIGHTS > 1\n    #if CC_LIGHT_1_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[1]);\n    #else\n      LightInfo info1;\n      #if CC_LIGHT_1_TYPE == 0\n        info1 = computeDirectionalLighting(cc_lightDirection[1], cc_lightColor[1]);\n      #elif CC_LIGHT_1_TYPE == 1\n        info1 = computePointLighting(s.position, cc_lightPositionAndRange[1], cc_lightColor[1]);\n      #elif CC_LIGHT_1_TYPE == 2\n        info1 = computeSpotLighting(s.position, cc_lightPositionAndRange[1], cc_lightDirection[1], cc_lightColor[1]);\n      #endif\n      Lighting result1 = brdf(s, info1);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 1\n    float shadow_1 = 1.0;\n    vec2 projCoords1 = v_posLightSpace[1].xy / v_posLightSpace[1].w;\n    vec2 shadowUV1 = projCoords1 * 0.5 + vec2(0.5);\n    if (shadowUV1.x >= 0.0 && shadowUV1.x <= 1.0 && shadowUV1.y >= 0.0 && shadowUV1.y <= 1.0) {\n      float currentDepth1 = clamp(v_depth[1], 0.0, 1.0);\n      #if CC_SHADOW_1_TYPE == 3\n        shadow_1 = shadowPCF3X3(cc_shadow_map_1, shadowUV1, currentDepth1, cc_shadow_info[1].w, cc_shadow_info[1].z);\n      #elif CC_SHADOW_1_TYPE == 4\n        shadow_1 = shadowPCF5X5(cc_shadow_map_1, shadowUV1, currentDepth1, cc_shadow_info[1].w, cc_shadow_info[1].z);\n      #else\n        shadow_1 = shadowSimple(cc_shadow_map_1, shadowUV1, currentDepth1, cc_shadow_info[1].w);\n      #endif\n      shadow_1 = computeFallOff(shadow_1, projCoords1, 0.0);\n    }\n    result1.diffuse *= shadow_1;\n    result1.specular *= shadow_1;\n  #endif\n      result.diffuse += result1.diffuse;\n      result.specular += result1.specular;\n    #endif\n  #endif\n  #if CC_NUM_LIGHTS > 2\n    #if CC_LIGHT_2_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[2]);\n    #else\n      LightInfo info2;\n      #if CC_LIGHT_2_TYPE == 0\n        info2 = computeDirectionalLighting(cc_lightDirection[2], cc_lightColor[2]);\n      #elif CC_LIGHT_2_TYPE == 1\n        info2 = computePointLighting(s.position, cc_lightPositionAndRange[2], cc_lightColor[2]);\n      #elif CC_LIGHT_2_TYPE == 2\n        info2 = computeSpotLighting(s.position, cc_lightPositionAndRange[2], cc_lightDirection[2], cc_lightColor[2]);\n      #endif\n      Lighting result2 = brdf(s, info2);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 2\n    float shadow_2 = 1.0;\n    vec2 projCoords2 = v_posLightSpace[2].xy / v_posLightSpace[2].w;\n    vec2 shadowUV2 = projCoords2 * 0.5 + vec2(0.5);\n    if (shadowUV2.x >= 0.0 && shadowUV2.x <= 1.0 && shadowUV2.y >= 0.0 && shadowUV2.y <= 1.0) {\n      float currentDepth2 = clamp(v_depth[2], 0.0, 1.0);\n      #if CC_SHADOW_2_TYPE == 3\n        shadow_2 = shadowPCF3X3(cc_shadow_map_2, shadowUV2, currentDepth2, cc_shadow_info[2].w, cc_shadow_info[2].z);\n      #elif CC_SHADOW_2_TYPE == 4\n        shadow_2 = shadowPCF5X5(cc_shadow_map_2, shadowUV2, currentDepth2, cc_shadow_info[2].w, cc_shadow_info[2].z);\n      #else\n        shadow_2 = shadowSimple(cc_shadow_map_2, shadowUV2, currentDepth2, cc_shadow_info[2].w);\n      #endif\n      shadow_2 = computeFallOff(shadow_2, projCoords2, 0.0);\n    }\n    result2.diffuse *= shadow_2;\n    result2.specular *= shadow_2;\n  #endif\n      result.diffuse += result2.diffuse;\n      result.specular += result2.specular;\n    #endif\n  #endif\n  #if CC_NUM_LIGHTS > 3\n    #if CC_LIGHT_3_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[3]);\n    #else\n      LightInfo info3;\n      #if CC_LIGHT_3_TYPE == 0\n        info3 = computeDirectionalLighting(cc_lightDirection[3], cc_lightColor[3]);\n      #elif CC_LIGHT_3_TYPE == 1\n        info3 = computePointLighting(s.position, cc_lightPositionAndRange[3], cc_lightColor[3]);\n      #elif CC_LIGHT_3_TYPE == 2\n        info3 = computeSpotLighting(s.position, cc_lightPositionAndRange[3], cc_lightDirection[3], cc_lightColor[3]);\n      #endif\n      Lighting result3 = brdf(s, info3);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 3\n    float shadow_3 = 1.0;\n    vec2 projCoords3 = v_posLightSpace[3].xy / v_posLightSpace[3].w;\n    vec2 shadowUV3 = projCoords3 * 0.5 + vec2(0.5);\n    if (shadowUV3.x >= 0.0 && shadowUV3.x <= 1.0 && shadowUV3.y >= 0.0 && shadowUV3.y <= 1.0) {\n      float currentDepth3 = clamp(v_depth[3], 0.0, 1.0);\n      #if CC_SHADOW_3_TYPE == 3\n        shadow_3 = shadowPCF3X3(cc_shadow_map_3, shadowUV3, currentDepth3, cc_shadow_info[3].w, cc_shadow_info[3].z);\n      #elif CC_SHADOW_3_TYPE == 4\n        shadow_3 = shadowPCF5X5(cc_shadow_map_3, shadowUV3, currentDepth3, cc_shadow_info[3].w, cc_shadow_info[3].z);\n      #else\n        shadow_3 = shadowSimple(cc_shadow_map_3, shadowUV3, currentDepth3, cc_shadow_info[3].w);\n      #endif\n      shadow_3 = computeFallOff(shadow_3, projCoords3, 0.0);\n    }\n    result3.diffuse *= shadow_3;\n    result3.specular *= shadow_3;\n  #endif\n      result.diffuse += result3.diffuse;\n      result.specular += result3.specular;\n    #endif\n  #endif\n  return composePhongShading(result, s);\n}\nvoid surf (out PhongSurface s) {\n  vec4 diffuse = vec4(1, 1, 1, 1);\n  #if CC_USE_ATTRIBUTE_COLOR\n    diffuse *= v_color;\n  #endif\n  diffuse *= diffuseColor;\n  #if USE_DIFFUSE_TEXTURE\n  vec4 diffuseTexture_tmp = texture(diffuseTexture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_diffuseTexture\n      diffuseTexture_tmp.a *= texture(diffuseTexture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    diffuse.rgb *= (diffuseTexture_tmp.rgb * diffuseTexture_tmp.rgb);\n    diffuse.a *= diffuseTexture_tmp.a;\n  #else\n    diffuse *= diffuseTexture_tmp;\n  #endif\n  #endif\n  ALPHA_TEST(diffuse);\n  s.diffuse = diffuse.rgb;\n  s.opacity = diffuse.a;\n  #if USE_EMISSIVE\n    s.emissive = emissiveColor.rgb;\n    #if USE_EMISSIVE_TEXTURE\n  vec4 emissiveTexture_tmp = texture(emissiveTexture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_emissiveTexture\n      emissiveTexture_tmp.a *= texture(emissiveTexture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    s.emissive.rgb *= (emissiveTexture_tmp.rgb * emissiveTexture_tmp.rgb);\n  #else\n    s.emissive.rgb *= emissiveTexture_tmp.rgb;\n  #endif\n    #endif\n  #endif\n  #if USE_SPECULAR\n    s.specular = specularColor.rgb;\n    #if USE_SPECULAR_TEXTURE\n  vec4 specularTexture_tmp = texture(specularTexture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_specularTexture\n      specularTexture_tmp.a *= texture(specularTexture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    s.specular.rgb *= (specularTexture_tmp.rgb * specularTexture_tmp.rgb);\n  #else\n    s.specular.rgb *= specularTexture_tmp.rgb;\n  #endif\n    #endif\n  #endif\n  s.normal = v_worldNormal;\n  #if USE_NORMAL_TEXTURE\n    vec3 nmmp = texture(normalTexture, v_uv0).xyz - vec3(0.5);\n    s.normal =\n      nmmp.x * normalize(v_tangent) +\n      nmmp.y * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n    s.normal = normalize(s.normal);\n  #endif\n  s.position = v_worldPos;\n  s.viewDirection = v_viewDirection;\n  s.glossiness = glossiness;\n}\nvoid main () {\n  PhongSurface s;\n  surf(s);\n  vec4 color = CCPhongShading(s);\n  gl_FragColor = CCFragOutput(color);\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matWorld;\nuniform mat4 cc_matWorldIT;\nuniform mat4 cc_matViewProj;\nuniform vec4 cc_cameraPos;\n#if CC_USE_SKINNING\n  attribute vec4 a_weights;\n  attribute vec4 a_joints;\n  #if CC_USE_JOINTS_TEXTRUE\n    uniform vec2 jointsTextureSize;\n    uniform sampler2D jointsTexture;\n    #if CC_JOINTS_TEXTURE_FLOAT32\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 4.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = texture2D(jointsTexture, vec2(dx * (x + 0.5), y));\n        vec4 v2 = texture2D(jointsTexture, vec2(dx * (x + 1.5), y));\n        vec4 v3 = texture2D(jointsTexture, vec2(dx * (x + 2.5), y));\n        vec4 v4 = texture2D(jointsTexture, vec2(dx * (x + 3.5), y));\n        return mat4(v1, v2, v3, v4);\n      }\n    #else\n      float decode32(vec4 rgba) {\n        float Sign = 1.0 - step(128.0, rgba[0]) * 2.0;\n        float Exponent = 2.0 * mod(rgba[0], 128.0) + step(128.0, rgba[1]) - 127.0;\n        float Mantissa = mod(rgba[1], 128.0) * 65536.0 + rgba[2] * 256.0 + rgba[3] + 8388608.0;\n        return Sign * exp2(Exponent - 23.0) * Mantissa;\n      }\n      vec4 decodevec4 (vec4 x, vec4 y, vec4 z, vec4 w) {\n        return vec4(\n          decode32(x.wzyx * 255.0),\n          decode32(y.wzyx * 255.0),\n          decode32(z.wzyx * 255.0),\n          decode32(w.wzyx * 255.0)\n        );\n      }\n      vec4 decodevec4 (float dx, float x, float y) {\n        return decodevec4(\n          texture2D(jointsTexture, vec2(dx * (x + 0.5), y)),\n          texture2D(jointsTexture, vec2(dx * (x + 1.5), y)),\n          texture2D(jointsTexture, vec2(dx * (x + 2.5), y)),\n          texture2D(jointsTexture, vec2(dx * (x + 3.5), y))\n        );\n      }\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 16.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = decodevec4(dx, x,       y);\n        vec4 v2 = decodevec4(dx, x+4.0,   y);\n        vec4 v3 = decodevec4(dx, x+8.0,   y);\n        vec4 v4 = decodevec4(dx, x+12.0,  y);\n        return mat4(v1, v2, v3, v4);\n      }\n    #endif\n  #else\n    uniform mat4 jointMatrices[50];\n    mat4 getBoneMatrix(const in float i) {\n      return jointMatrices[int(i)];\n    }\n  #endif\n    mat4 skinMatrix() {\n      return\n        getBoneMatrix(a_joints.x) * a_weights.x +\n        getBoneMatrix(a_joints.y) * a_weights.y +\n        getBoneMatrix(a_joints.z) * a_weights.z +\n        getBoneMatrix(a_joints.w) * a_weights.w\n        ;\n    }\n#endif\nstruct StandardVertInput {\n  vec2 uv;\n  vec4 position;\n  vec3 normal;\n  vec4 tangent;\n  vec4 color;\n};\nattribute vec3 a_position;\n#if CC_USE_ATTRIBUTE_UV0\nattribute vec2 a_uv0;\n#endif\n#if CC_USE_ATTRIBUTE_COLOR\nattribute vec4 a_color;\n#endif\n#if CC_USE_ATTRIBUTE_NORMAL\nattribute vec3 a_normal;\n#endif\n#if CC_USE_ATTRIBUTE_TANGENT\nattribute vec4 a_tangent;\n#endif\nvoid CCAttribute (out StandardVertInput In) {\n  In.position = vec4(a_position, 1.0);\n  #if CC_USE_ATTRIBUTE_UV0\n    In.uv = a_uv0;\n  #else\n    In.uv = vec2(0.0);\n  #endif\n  #if CC_USE_ATTRIBUTE_COLOR\n    In.color = a_color;\n  #else\n    In.color = vec4(1.0);\n  #endif\n  #if CC_USE_ATTRIBUTE_NORMAL\n    In.normal = a_normal;\n  #else\n    In.normal = vec3(0.0, 1.0, 0.0);\n  #endif\n  #if CC_USE_ATTRIBUTE_TANGENT\n    In.tangent = a_tangent;\n  #else\n    In.tangent = vec4(1.0, 0.0, 0.0, 0.0);\n  #endif\n}\nvoid CCVertInput(out StandardVertInput In) {\n  CCAttribute(In);\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    In.position = m * In.position;\n    #if CC_USE_ATTRIBUTE_NORMAL\n      In.normal = (m * vec4(In.normal, 0)).xyz;\n    #endif\n    #if CC_USE_ATTRIBUTE_TANGENT\n      In.tangent = m * In.tangent;\n    #endif\n  #endif\n}\n#if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n  uniform mat4 cc_shadow_lightViewProjMatrix[2];\nuniform vec4 cc_shadow_info[2];\n  #if CC_NUM_SHADOW_LIGHTS > 0\n    uniform sampler2D cc_shadow_map_0;\n  #endif\n  #if CC_NUM_SHADOW_LIGHTS > 1\n    uniform sampler2D cc_shadow_map_1;\n  #endif\n  varying vec4 v_posLightSpace[2];\n  varying float v_depth[2];\n#endif\nvoid CCShadowInput (vec3 worldPos) {\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n  for (int i = 0; i < CC_NUM_SHADOW_LIGHTS; i++) {\n    v_posLightSpace[i] = cc_shadow_lightViewProjMatrix[i] * vec4(worldPos, 1.0);\n    v_depth[i] = (v_posLightSpace[i].z + cc_shadow_info[i].x) / (cc_shadow_info[i].x + cc_shadow_info[i].y);\n  }\n  #endif\n}\nuniform vec2 mainTiling;\nuniform vec2 mainOffset;\n#if CC_USE_ATTRIBUTE_UV0 && (USE_DIFFUSE_TEXTURE || USE_EMISSIVE_TEXTURE || USE_SPECULAR_TEXTURE || USE_NORMAL_TEXTURE)\n  varying mediump vec2 v_uv0;\n#endif\n#if CC_USE_ATTRIBUTE_COLOR\n  varying lowp vec4 v_color;\n#endif\n#if USE_NORMAL_TEXTURE\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n#endif\nvarying vec3 v_worldNormal;\nvarying vec3 v_worldPos;\nvarying vec3 v_viewDirection;\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  vec4 position = In.position;\n  v_worldNormal = normalize((cc_matWorldIT * vec4(In.normal, 0)).xyz);\n  v_worldPos = (cc_matWorld * position).xyz;\n  v_viewDirection = normalize(cc_cameraPos.xyz - v_worldPos);\n  #if CC_USE_ATTRIBUTE_UV0 && (USE_DIFFUSE_TEXTURE || USE_EMISSIVE_TEXTURE || USE_SPECULAR_TEXTURE || USE_NORMAL_TEXTURE)\n    v_uv0 = In.uv * mainTiling + mainOffset;\n  #endif\n  #if CC_USE_ATTRIBUTE_COLOR\n    v_color = In.color;\n  #endif\n  #if USE_NORMAL_TEXTURE\n    v_tangent = normalize((cc_matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_worldNormal, v_tangent) * In.tangent.w;\n  #endif\n  CCShadowInput(v_worldPos);\n  gl_Position = cc_matViewProj * cc_matWorld * position;\n}","frag":"\nprecision highp float;\nvec4 CCFragOutput (vec4 color) {\n  #if OUTPUT_TO_GAMMA\n    color.rgb = sqrt(color.rgb);\n  #endif\n\treturn color;\n}\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform lowp vec4 diffuseColor;\nuniform lowp vec4 specularColor;\nuniform lowp vec4 emissiveColor;\nuniform float glossiness;\n#if USE_DIFFUSE_TEXTURE\n  uniform sampler2D diffuseTexture;\n#endif\n#if USE_SPECULAR && USE_SPECULAR_TEXTURE\n  uniform sampler2D specularTexture;\n#endif\n#if USE_EMISSIVE && USE_EMISSIVE_TEXTURE\n  uniform sampler2D emissiveTexture;\n#endif\n#if USE_NORMAL_TEXTURE\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n  uniform sampler2D normalTexture;\n#endif\nvarying vec3 v_worldNormal;\nvarying vec3 v_worldPos;\nvarying vec3 v_viewDirection;\n#if CC_USE_ATTRIBUTE_UV0 && (USE_DIFFUSE_TEXTURE || (USE_EMISSIVE && USE_EMISSIVE_TEXTURE) || (USE_SPECULAR && USE_SPECULAR_TEXTURE) || USE_NORMAL_TEXTURE)\n  varying mediump vec2 v_uv0;\n#endif\n#if CC_USE_ATTRIBUTE_COLOR\n  varying lowp vec4 v_color;\n#endif\n#if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n  uniform vec4 cc_shadow_info[2];\n  #if CC_NUM_SHADOW_LIGHTS > 0\n    uniform sampler2D cc_shadow_map_0;\n  #endif\n  #if CC_NUM_SHADOW_LIGHTS > 1\n    uniform sampler2D cc_shadow_map_1;\n  #endif\n  varying vec4 v_posLightSpace[2];\n  varying float v_depth[2];\n#endif\nfloat unpackRGBAToDepth(vec4 color) {\n  return dot(color, vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n}\nfloat getDepth(sampler2D shadowMap, vec2 shadowUV) {\n    return unpackRGBAToDepth(texture2D(shadowMap, shadowUV));\n}\nfloat computeFallOff(float shadow, vec2 coords, float frustumEdgeFalloff) {\n  return shadow;\n}\nfloat shadowSimple(sampler2D shadowMap, vec2 shadowUV, float currentDepth, float darkness) {\n  float closestDepth = getDepth(shadowMap, shadowUV);\n  return currentDepth > closestDepth  ? 1.0 - darkness : 1.0;\n}\nfloat shadowPCF3X3(sampler2D shadowMap, vec2 shadowUV, float currentDepth, float darkness, float shadowSize) {\n  float shadow = 0.0;\n  for (int x = -1; x <= 1; ++x) {\n    for (int y = -1; y <= 1; ++y) {\n      float closestDepth = getDepth(shadowMap, shadowUV + vec2(x, y) * 1.0/shadowSize);\n      shadow += currentDepth > closestDepth  ? 1.0 - darkness : 1.0;\n    }\n  }\n  shadow /= 9.0;\n  return shadow;\n}\nfloat shadowPCF5X5(sampler2D shadowMap, vec2 shadowUV, float currentDepth, float darkness, float shadowSize) {\n  float shadow = 0.0;\n  for (int x = -2; x <= 2; ++x) {\n    for (int y = -2; y <= 2; ++y) {\n      float closestDepth = getDepth(shadowMap, shadowUV + vec2(x, y) * 1.0/shadowSize);\n      shadow += currentDepth > closestDepth  ? 1.0 - darkness : 1.0;\n    }\n  }\n  shadow /= 25.0;\n  return shadow;\n}\n#if CC_NUM_LIGHTS > 0\nuniform vec4 cc_lightPositionAndRange[4];\nuniform vec4 cc_lightDirection[4];\nuniform vec4 cc_lightColor[4];\n#endif\nstruct LightInfo {\n  vec3 lightDir;\n  vec3 radiance;\n  vec4 lightColor;\n};\nLightInfo computeDirectionalLighting(\n  vec4 lightDirection,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  ret.lightDir = -normalize(lightDirection.xyz);\n  ret.radiance = lightColor.rgb;\n  ret.lightColor = lightColor;\n  return ret;\n}\nLightInfo computePointLighting(\n  vec3 worldPosition,\n  vec4 lightPositionAndRange,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  vec3 lightDir = lightPositionAndRange.xyz - worldPosition;\n  float attenuation = max(0., 1.0 - length(lightDir) / lightPositionAndRange.w);\n  ret.lightDir = normalize(lightDir);\n  ret.radiance = lightColor.rgb * attenuation;\n  ret.lightColor = lightColor;\n  return ret;\n}\nLightInfo computeSpotLighting(\n  vec3 worldPosition,\n  vec4 lightPositionAndRange,\n  vec4 lightDirection,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  vec3 lightDir = lightPositionAndRange.xyz - worldPosition;\n  float attenuation = max(0., 1.0 - length(lightDir) / lightPositionAndRange.w);\n  lightDir = normalize(lightDir);\n  float cosConeAngle = max(0., dot(lightDirection.xyz, -lightDir));\n  cosConeAngle = cosConeAngle < lightDirection.w ? 0. : cosConeAngle;\n  cosConeAngle = pow(cosConeAngle, lightColor.w);\n  ret.lightDir = lightDir;\n  ret.radiance = lightColor.rgb * attenuation * cosConeAngle;\n  ret.lightColor = lightColor;\n  return ret;\n}\nstruct Lighting {\n  vec3 diffuse;\n  vec3 specular;\n};\nstruct PhongSurface {\n  vec3 diffuse;\n  vec3 emissive;\n  vec3 specular;\n  float opacity;\n  float glossiness;\n  vec3 position;\n  vec3 normal;\n  vec3 viewDirection;\n};\nLighting brdf (PhongSurface s, LightInfo info) {\n  Lighting result;\n  float ndh = 0.0;\n  vec3 halfDir = normalize(s.viewDirection + info.lightDir);\n  float NdotH = max(0.0, dot(s.normal, halfDir));\n  NdotH = pow(NdotH, max(1.0, s.glossiness * 128.0));\n  result.diffuse = info.radiance * max(0.0, dot(s.normal, info.lightDir));\n  result.specular = info.radiance * NdotH;\n  return result;\n}\nvec4 composePhongShading (Lighting lighting, PhongSurface s) {\n  vec4 o = vec4(0.0, 0.0, 0.0, 1.0);\n  o.rgb = lighting.diffuse * s.diffuse;\n  #if USE_EMISSIVE\n    o.rgb += s.emissive;\n  #endif\n  #if USE_SPECULAR\n    o.rgb += lighting.specular * s.specular;\n  #endif\n  o.a = s.opacity;\n  return o;\n}\nvec3 ambient(PhongSurface s, vec4 ambientColor) {\n  return s.diffuse * ambientColor.rgb;\n}\nvec4 CCPhongShading (in PhongSurface s) {\n  Lighting result;\n  result.diffuse = vec3(0, 0, 0);\n  result.specular = vec3(0, 0, 0);\n  #if CC_NUM_LIGHTS > 0\n    #if CC_LIGHT_0_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[0]);\n    #else\n      LightInfo info0;\n      #if CC_LIGHT_0_TYPE == 0\n        info0 = computeDirectionalLighting(cc_lightDirection[0], cc_lightColor[0]);\n      #elif CC_LIGHT_0_TYPE == 1\n        info0 = computePointLighting(s.position, cc_lightPositionAndRange[0], cc_lightColor[0]);\n      #elif CC_LIGHT_0_TYPE == 2\n        info0 = computeSpotLighting(s.position, cc_lightPositionAndRange[0], cc_lightDirection[0], cc_lightColor[0]);\n      #endif\n      Lighting result0 = brdf(s, info0);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n    float shadow_0 = 1.0;\n    vec2 projCoords0 = v_posLightSpace[0].xy / v_posLightSpace[0].w;\n    vec2 shadowUV0 = projCoords0 * 0.5 + vec2(0.5);\n    if (shadowUV0.x >= 0.0 && shadowUV0.x <= 1.0 && shadowUV0.y >= 0.0 && shadowUV0.y <= 1.0) {\n      float currentDepth0 = clamp(v_depth[0], 0.0, 1.0);\n      #if CC_SHADOW_0_TYPE == 3\n        shadow_0 = shadowPCF3X3(cc_shadow_map_0, shadowUV0, currentDepth0, cc_shadow_info[0].w, cc_shadow_info[0].z);\n      #elif CC_SHADOW_0_TYPE == 4\n        shadow_0 = shadowPCF5X5(cc_shadow_map_0, shadowUV0, currentDepth0, cc_shadow_info[0].w, cc_shadow_info[0].z);\n      #else\n        shadow_0 = shadowSimple(cc_shadow_map_0, shadowUV0, currentDepth0, cc_shadow_info[0].w);\n      #endif\n      shadow_0 = computeFallOff(shadow_0, projCoords0, 0.0);\n    }\n    result0.diffuse *= shadow_0;\n    result0.specular *= shadow_0;\n  #endif\n      result.diffuse += result0.diffuse;\n      result.specular += result0.specular;\n    #endif\n  #endif\n  #if CC_NUM_LIGHTS > 1\n    #if CC_LIGHT_1_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[1]);\n    #else\n      LightInfo info1;\n      #if CC_LIGHT_1_TYPE == 0\n        info1 = computeDirectionalLighting(cc_lightDirection[1], cc_lightColor[1]);\n      #elif CC_LIGHT_1_TYPE == 1\n        info1 = computePointLighting(s.position, cc_lightPositionAndRange[1], cc_lightColor[1]);\n      #elif CC_LIGHT_1_TYPE == 2\n        info1 = computeSpotLighting(s.position, cc_lightPositionAndRange[1], cc_lightDirection[1], cc_lightColor[1]);\n      #endif\n      Lighting result1 = brdf(s, info1);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 1\n    float shadow_1 = 1.0;\n    vec2 projCoords1 = v_posLightSpace[1].xy / v_posLightSpace[1].w;\n    vec2 shadowUV1 = projCoords1 * 0.5 + vec2(0.5);\n    if (shadowUV1.x >= 0.0 && shadowUV1.x <= 1.0 && shadowUV1.y >= 0.0 && shadowUV1.y <= 1.0) {\n      float currentDepth1 = clamp(v_depth[1], 0.0, 1.0);\n      #if CC_SHADOW_1_TYPE == 3\n        shadow_1 = shadowPCF3X3(cc_shadow_map_1, shadowUV1, currentDepth1, cc_shadow_info[1].w, cc_shadow_info[1].z);\n      #elif CC_SHADOW_1_TYPE == 4\n        shadow_1 = shadowPCF5X5(cc_shadow_map_1, shadowUV1, currentDepth1, cc_shadow_info[1].w, cc_shadow_info[1].z);\n      #else\n        shadow_1 = shadowSimple(cc_shadow_map_1, shadowUV1, currentDepth1, cc_shadow_info[1].w);\n      #endif\n      shadow_1 = computeFallOff(shadow_1, projCoords1, 0.0);\n    }\n    result1.diffuse *= shadow_1;\n    result1.specular *= shadow_1;\n  #endif\n      result.diffuse += result1.diffuse;\n      result.specular += result1.specular;\n    #endif\n  #endif\n  #if CC_NUM_LIGHTS > 2\n    #if CC_LIGHT_2_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[2]);\n    #else\n      LightInfo info2;\n      #if CC_LIGHT_2_TYPE == 0\n        info2 = computeDirectionalLighting(cc_lightDirection[2], cc_lightColor[2]);\n      #elif CC_LIGHT_2_TYPE == 1\n        info2 = computePointLighting(s.position, cc_lightPositionAndRange[2], cc_lightColor[2]);\n      #elif CC_LIGHT_2_TYPE == 2\n        info2 = computeSpotLighting(s.position, cc_lightPositionAndRange[2], cc_lightDirection[2], cc_lightColor[2]);\n      #endif\n      Lighting result2 = brdf(s, info2);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 2\n    float shadow_2 = 1.0;\n    vec2 projCoords2 = v_posLightSpace[2].xy / v_posLightSpace[2].w;\n    vec2 shadowUV2 = projCoords2 * 0.5 + vec2(0.5);\n    if (shadowUV2.x >= 0.0 && shadowUV2.x <= 1.0 && shadowUV2.y >= 0.0 && shadowUV2.y <= 1.0) {\n      float currentDepth2 = clamp(v_depth[2], 0.0, 1.0);\n      #if CC_SHADOW_2_TYPE == 3\n        shadow_2 = shadowPCF3X3(cc_shadow_map_2, shadowUV2, currentDepth2, cc_shadow_info[2].w, cc_shadow_info[2].z);\n      #elif CC_SHADOW_2_TYPE == 4\n        shadow_2 = shadowPCF5X5(cc_shadow_map_2, shadowUV2, currentDepth2, cc_shadow_info[2].w, cc_shadow_info[2].z);\n      #else\n        shadow_2 = shadowSimple(cc_shadow_map_2, shadowUV2, currentDepth2, cc_shadow_info[2].w);\n      #endif\n      shadow_2 = computeFallOff(shadow_2, projCoords2, 0.0);\n    }\n    result2.diffuse *= shadow_2;\n    result2.specular *= shadow_2;\n  #endif\n      result.diffuse += result2.diffuse;\n      result.specular += result2.specular;\n    #endif\n  #endif\n  #if CC_NUM_LIGHTS > 3\n    #if CC_LIGHT_3_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[3]);\n    #else\n      LightInfo info3;\n      #if CC_LIGHT_3_TYPE == 0\n        info3 = computeDirectionalLighting(cc_lightDirection[3], cc_lightColor[3]);\n      #elif CC_LIGHT_3_TYPE == 1\n        info3 = computePointLighting(s.position, cc_lightPositionAndRange[3], cc_lightColor[3]);\n      #elif CC_LIGHT_3_TYPE == 2\n        info3 = computeSpotLighting(s.position, cc_lightPositionAndRange[3], cc_lightDirection[3], cc_lightColor[3]);\n      #endif\n      Lighting result3 = brdf(s, info3);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 3\n    float shadow_3 = 1.0;\n    vec2 projCoords3 = v_posLightSpace[3].xy / v_posLightSpace[3].w;\n    vec2 shadowUV3 = projCoords3 * 0.5 + vec2(0.5);\n    if (shadowUV3.x >= 0.0 && shadowUV3.x <= 1.0 && shadowUV3.y >= 0.0 && shadowUV3.y <= 1.0) {\n      float currentDepth3 = clamp(v_depth[3], 0.0, 1.0);\n      #if CC_SHADOW_3_TYPE == 3\n        shadow_3 = shadowPCF3X3(cc_shadow_map_3, shadowUV3, currentDepth3, cc_shadow_info[3].w, cc_shadow_info[3].z);\n      #elif CC_SHADOW_3_TYPE == 4\n        shadow_3 = shadowPCF5X5(cc_shadow_map_3, shadowUV3, currentDepth3, cc_shadow_info[3].w, cc_shadow_info[3].z);\n      #else\n        shadow_3 = shadowSimple(cc_shadow_map_3, shadowUV3, currentDepth3, cc_shadow_info[3].w);\n      #endif\n      shadow_3 = computeFallOff(shadow_3, projCoords3, 0.0);\n    }\n    result3.diffuse *= shadow_3;\n    result3.specular *= shadow_3;\n  #endif\n      result.diffuse += result3.diffuse;\n      result.specular += result3.specular;\n    #endif\n  #endif\n  return composePhongShading(result, s);\n}\nvoid surf (out PhongSurface s) {\n  vec4 diffuse = vec4(1, 1, 1, 1);\n  #if CC_USE_ATTRIBUTE_COLOR\n    diffuse *= v_color;\n  #endif\n  diffuse *= diffuseColor;\n  #if USE_DIFFUSE_TEXTURE\n  vec4 diffuseTexture_tmp = texture2D(diffuseTexture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_diffuseTexture\n      diffuseTexture_tmp.a *= texture2D(diffuseTexture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    diffuse.rgb *= (diffuseTexture_tmp.rgb * diffuseTexture_tmp.rgb);\n    diffuse.a *= diffuseTexture_tmp.a;\n  #else\n    diffuse *= diffuseTexture_tmp;\n  #endif\n  #endif\n  ALPHA_TEST(diffuse);\n  s.diffuse = diffuse.rgb;\n  s.opacity = diffuse.a;\n  #if USE_EMISSIVE\n    s.emissive = emissiveColor.rgb;\n    #if USE_EMISSIVE_TEXTURE\n  vec4 emissiveTexture_tmp = texture2D(emissiveTexture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_emissiveTexture\n      emissiveTexture_tmp.a *= texture2D(emissiveTexture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    s.emissive.rgb *= (emissiveTexture_tmp.rgb * emissiveTexture_tmp.rgb);\n  #else\n    s.emissive.rgb *= emissiveTexture_tmp.rgb;\n  #endif\n    #endif\n  #endif\n  #if USE_SPECULAR\n    s.specular = specularColor.rgb;\n    #if USE_SPECULAR_TEXTURE\n  vec4 specularTexture_tmp = texture2D(specularTexture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_specularTexture\n      specularTexture_tmp.a *= texture2D(specularTexture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    s.specular.rgb *= (specularTexture_tmp.rgb * specularTexture_tmp.rgb);\n  #else\n    s.specular.rgb *= specularTexture_tmp.rgb;\n  #endif\n    #endif\n  #endif\n  s.normal = v_worldNormal;\n  #if USE_NORMAL_TEXTURE\n    vec3 nmmp = texture2D(normalTexture, v_uv0).xyz - vec3(0.5);\n    s.normal =\n      nmmp.x * normalize(v_tangent) +\n      nmmp.y * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n    s.normal = normalize(s.normal);\n  #endif\n  s.position = v_worldPos;\n  s.viewDirection = v_viewDirection;\n  s.glossiness = glossiness;\n}\nvoid main () {\n  PhongSurface s;\n  surf(s);\n  vec4 color = CCPhongShading(s);\n  gl_FragColor = CCFragOutput(color);\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CC_SHADOW","defines":["CC_USE_SHADOW_MAP","CC_NUM_SHADOW_LIGHTS"]},{"name":"CCLIGHTS","defines":["CC_NUM_LIGHTS"]}],"samplers":[{"name":"cc_shadow_map_0","defines":["CC_USE_SHADOW_MAP","CC_NUM_SHADOW_LIGHTS"]},{"name":"cc_shadow_map_1","defines":["CC_USE_SHADOW_MAP","CC_NUM_SHADOW_LIGHTS"]}]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_JOINTS_TEXTRUE","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"CC_JOINTS_TEXTURE_FLOAT32","type":"boolean","defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"]},{"name":"CC_USE_ATTRIBUTE_UV0","type":"boolean","defines":[]},{"name":"CC_USE_ATTRIBUTE_COLOR","type":"boolean","defines":[]},{"name":"CC_USE_ATTRIBUTE_NORMAL","type":"boolean","defines":[]},{"name":"CC_USE_ATTRIBUTE_TANGENT","type":"boolean","defines":[]},{"name":"CC_USE_SHADOW_MAP","type":"boolean","defines":[]},{"name":"CC_NUM_SHADOW_LIGHTS","type":"number","defines":["CC_USE_SHADOW_MAP"],"range":[0,3]},{"name":"USE_DIFFUSE_TEXTURE","type":"boolean","defines":[]},{"name":"USE_NORMAL_TEXTURE","type":"boolean","defines":[]},{"name":"OUTPUT_TO_GAMMA","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"USE_SPECULAR","type":"boolean","defines":[]},{"name":"USE_SPECULAR_TEXTURE","type":"boolean","defines":["USE_SPECULAR"]},{"name":"USE_EMISSIVE","type":"boolean","defines":[]},{"name":"USE_EMISSIVE_TEXTURE","type":"boolean","defines":["USE_EMISSIVE"]},{"name":"CC_NUM_LIGHTS","type":"number","defines":[],"range":[0,3]},{"name":"CC_LIGHT_0_TYPE","type":"number","defines":["CC_NUM_LIGHTS"],"range":[0,3]},{"name":"CC_SHADOW_0_TYPE","type":"number","defines":["CC_NUM_LIGHTS","CC_USE_SHADOW_MAP","CC_NUM_SHADOW_LIGHTS"],"range":[0,3]},{"name":"CC_LIGHT_1_TYPE","type":"number","defines":["CC_NUM_LIGHTS"],"range":[0,3]},{"name":"CC_SHADOW_1_TYPE","type":"number","defines":["CC_NUM_LIGHTS","CC_USE_SHADOW_MAP","CC_NUM_SHADOW_LIGHTS"],"range":[0,3]},{"name":"CC_LIGHT_2_TYPE","type":"number","defines":["CC_NUM_LIGHTS"],"range":[0,3]},{"name":"CC_SHADOW_2_TYPE","type":"number","defines":["CC_NUM_LIGHTS","CC_USE_SHADOW_MAP","CC_NUM_SHADOW_LIGHTS"],"range":[0,3]},{"name":"CC_LIGHT_3_TYPE","type":"number","defines":["CC_NUM_LIGHTS"],"range":[0,3]},{"name":"CC_SHADOW_3_TYPE","type":"number","defines":["CC_NUM_LIGHTS","CC_USE_SHADOW_MAP","CC_NUM_SHADOW_LIGHTS"],"range":[0,3]},{"name":"CC_USE_ALPHA_ATLAS_diffuseTexture","type":"boolean","defines":["USE_DIFFUSE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_DIFFUSE_TEXTURE"]},{"name":"CC_USE_ALPHA_ATLAS_emissiveTexture","type":"boolean","defines":["USE_EMISSIVE","USE_EMISSIVE_TEXTURE"]},{"name":"CC_USE_ALPHA_ATLAS_specularTexture","type":"boolean","defines":["USE_SPECULAR","USE_SPECULAR_TEXTURE"]}],"blocks":[{"name":"SKINNING","binding":0,"members":[{"name":"jointsTextureSize","type":14,"count":1}],"defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"]},{"name":"JOINT_MATRIX","binding":1,"members":[{"name":"jointMatrices","type":26,"count":50}],"defines":["CC_USE_SKINNING"]},{"name":"MAIN_TILING","binding":2,"members":[{"name":"mainTiling","type":14,"count":1},{"name":"mainOffset","type":14,"count":1}],"defines":[]},{"name":"ALPHA_TEST","binding":3,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"PhongFrag","binding":4,"members":[{"name":"diffuseColor","type":16,"count":1},{"name":"specularColor","type":16,"count":1},{"name":"emissiveColor","type":16,"count":1},{"name":"glossiness","type":13,"count":1}],"defines":[]}],"samplers":[{"name":"jointsTexture","type":29,"count":1,"binding":30,"defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"]},{"name":"diffuseTexture","type":29,"count":1,"binding":31,"defines":["USE_DIFFUSE_TEXTURE"]},{"name":"specularTexture","type":29,"count":1,"binding":32,"defines":["USE_SPECULAR","USE_SPECULAR_TEXTURE"]},{"name":"emissiveTexture","type":29,"count":1,"binding":33,"defines":["USE_EMISSIVE","USE_EMISSIVE_TEXTURE"]},{"name":"normalTexture","type":29,"count":1,"binding":34,"defines":["USE_NORMAL_TEXTURE"]}]},{"hash":1165371292,"record":null,"name":"builtin-phong|shadow-map-vs|shadow-map-fs","glsl3":{"vert":"\nprecision highp float;\nin vec3 a_position;\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nuniform CC_SHADOW_MAP {\n  mat4  cc_shadow_map_lightViewProjMatrix;\n  vec4  cc_shadow_map_info;\n  float cc_shadow_map_bias;\n};\nout float v_depth;\n#if CC_USE_SKINNING\n  in vec4 a_weights;\n  in vec4 a_joints;\n  #if CC_USE_JOINTS_TEXTRUE\n    uniform SKINNING {\n      vec2 jointsTextureSize;\n    };\n    uniform sampler2D jointsTexture;\n    #if CC_JOINTS_TEXTURE_FLOAT32\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 4.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = texture(jointsTexture, vec2(dx * (x + 0.5), y));\n        vec4 v2 = texture(jointsTexture, vec2(dx * (x + 1.5), y));\n        vec4 v3 = texture(jointsTexture, vec2(dx * (x + 2.5), y));\n        vec4 v4 = texture(jointsTexture, vec2(dx * (x + 3.5), y));\n        return mat4(v1, v2, v3, v4);\n      }\n    #else\n      float decode32(vec4 rgba) {\n        float Sign = 1.0 - step(128.0, rgba[0]) * 2.0;\n        float Exponent = 2.0 * mod(rgba[0], 128.0) + step(128.0, rgba[1]) - 127.0;\n        float Mantissa = mod(rgba[1], 128.0) * 65536.0 + rgba[2] * 256.0 + rgba[3] + 8388608.0;\n        return Sign * exp2(Exponent - 23.0) * Mantissa;\n      }\n      vec4 decodevec4 (vec4 x, vec4 y, vec4 z, vec4 w) {\n        return vec4(\n          decode32(x.wzyx * 255.0),\n          decode32(y.wzyx * 255.0),\n          decode32(z.wzyx * 255.0),\n          decode32(w.wzyx * 255.0)\n        );\n      }\n      vec4 decodevec4 (float dx, float x, float y) {\n        return decodevec4(\n          texture(jointsTexture, vec2(dx * (x + 0.5), y)),\n          texture(jointsTexture, vec2(dx * (x + 1.5), y)),\n          texture(jointsTexture, vec2(dx * (x + 2.5), y)),\n          texture(jointsTexture, vec2(dx * (x + 3.5), y))\n        );\n      }\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 16.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = decodevec4(dx, x,       y);\n        vec4 v2 = decodevec4(dx, x+4.0,   y);\n        vec4 v3 = decodevec4(dx, x+8.0,   y);\n        vec4 v4 = decodevec4(dx, x+12.0,  y);\n        return mat4(v1, v2, v3, v4);\n      }\n    #endif\n  #else\n    uniform JOINT_MATRIX {\n      mat4 jointMatrices[50];\n    };\n    mat4 getBoneMatrix(const in float i) {\n      return jointMatrices[int(i)];\n    }\n  #endif\n    mat4 skinMatrix() {\n      return\n        getBoneMatrix(a_joints.x) * a_weights.x +\n        getBoneMatrix(a_joints.y) * a_weights.y +\n        getBoneMatrix(a_joints.z) * a_weights.z +\n        getBoneMatrix(a_joints.w) * a_weights.w\n        ;\n    }\n#endif\nvoid SKIN_VERTEX(inout vec4 a1) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n  #endif\n}\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n  #endif\n}\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2, inout vec4 a3) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n    a3 = m * a3;\n  #endif\n}\nvoid main () {\n  vec4 position = vec4(a_position, 1);\n  SKIN_VERTEX(position);\n  gl_Position = cc_shadow_map_lightViewProjMatrix * cc_matWorld * position;\n  v_depth = ((gl_Position.z + cc_shadow_map_info.x) / (cc_shadow_map_info.x + cc_shadow_map_info.y)) + cc_shadow_map_bias;\n}","frag":"\nprecision highp float;\nin float v_depth;\nvec4 packDepthToRGBA(float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\nvoid main () {\n    gl_FragColor = packDepthToRGBA(v_depth);\n}"},"glsl1":{"vert":"\nprecision highp float;\nattribute vec3 a_position;\nuniform mat4 cc_matWorld;\nuniform mat4 cc_shadow_map_lightViewProjMatrix;\nuniform vec4 cc_shadow_map_info;\nuniform float cc_shadow_map_bias;\nvarying float v_depth;\n#if CC_USE_SKINNING\n  attribute vec4 a_weights;\n  attribute vec4 a_joints;\n  #if CC_USE_JOINTS_TEXTRUE\n    uniform vec2 jointsTextureSize;\n    uniform sampler2D jointsTexture;\n    #if CC_JOINTS_TEXTURE_FLOAT32\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 4.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = texture2D(jointsTexture, vec2(dx * (x + 0.5), y));\n        vec4 v2 = texture2D(jointsTexture, vec2(dx * (x + 1.5), y));\n        vec4 v3 = texture2D(jointsTexture, vec2(dx * (x + 2.5), y));\n        vec4 v4 = texture2D(jointsTexture, vec2(dx * (x + 3.5), y));\n        return mat4(v1, v2, v3, v4);\n      }\n    #else\n      float decode32(vec4 rgba) {\n        float Sign = 1.0 - step(128.0, rgba[0]) * 2.0;\n        float Exponent = 2.0 * mod(rgba[0], 128.0) + step(128.0, rgba[1]) - 127.0;\n        float Mantissa = mod(rgba[1], 128.0) * 65536.0 + rgba[2] * 256.0 + rgba[3] + 8388608.0;\n        return Sign * exp2(Exponent - 23.0) * Mantissa;\n      }\n      vec4 decodevec4 (vec4 x, vec4 y, vec4 z, vec4 w) {\n        return vec4(\n          decode32(x.wzyx * 255.0),\n          decode32(y.wzyx * 255.0),\n          decode32(z.wzyx * 255.0),\n          decode32(w.wzyx * 255.0)\n        );\n      }\n      vec4 decodevec4 (float dx, float x, float y) {\n        return decodevec4(\n          texture2D(jointsTexture, vec2(dx * (x + 0.5), y)),\n          texture2D(jointsTexture, vec2(dx * (x + 1.5), y)),\n          texture2D(jointsTexture, vec2(dx * (x + 2.5), y)),\n          texture2D(jointsTexture, vec2(dx * (x + 3.5), y))\n        );\n      }\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 16.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = decodevec4(dx, x,       y);\n        vec4 v2 = decodevec4(dx, x+4.0,   y);\n        vec4 v3 = decodevec4(dx, x+8.0,   y);\n        vec4 v4 = decodevec4(dx, x+12.0,  y);\n        return mat4(v1, v2, v3, v4);\n      }\n    #endif\n  #else\n    uniform mat4 jointMatrices[50];\n    mat4 getBoneMatrix(const in float i) {\n      return jointMatrices[int(i)];\n    }\n  #endif\n    mat4 skinMatrix() {\n      return\n        getBoneMatrix(a_joints.x) * a_weights.x +\n        getBoneMatrix(a_joints.y) * a_weights.y +\n        getBoneMatrix(a_joints.z) * a_weights.z +\n        getBoneMatrix(a_joints.w) * a_weights.w\n        ;\n    }\n#endif\nvoid SKIN_VERTEX(inout vec4 a1) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n  #endif\n}\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n  #endif\n}\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2, inout vec4 a3) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n    a3 = m * a3;\n  #endif\n}\nvoid main () {\n  vec4 position = vec4(a_position, 1);\n  SKIN_VERTEX(position);\n  gl_Position = cc_shadow_map_lightViewProjMatrix * cc_matWorld * position;\n  v_depth = ((gl_Position.z + cc_shadow_map_info.x) / (cc_shadow_map_info.x + cc_shadow_map_info.y)) + cc_shadow_map_bias;\n}","frag":"\nprecision highp float;\nvarying float v_depth;\nvec4 packDepthToRGBA(float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\nvoid main () {\n    gl_FragColor = packDepthToRGBA(v_depth);\n}"},"builtins":{"globals":{"blocks":[{"name":"CC_SHADOW_MAP","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_JOINTS_TEXTRUE","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"CC_JOINTS_TEXTURE_FLOAT32","type":"boolean","defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"]}],"blocks":[{"name":"SKINNING","binding":0,"members":[{"name":"jointsTextureSize","type":14,"count":1}],"defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"]},{"name":"JOINT_MATRIX","binding":1,"members":[{"name":"jointMatrices","type":26,"count":50}],"defines":["CC_USE_SKINNING"]}],"samplers":[{"name":"jointsTexture","type":29,"count":1,"binding":30,"defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"]}]}],[{"passes":[{"name":"phong","program":"builtin-phong|phong-vs|phong-fs","rasterizerState":{"cullMode":1029},"depthStencilState":{"depthTest":true,"depthWrite":true},"properties":{"alphaThreshold":{"type":13,"value":[0.5]},"mainTiling":{"type":14,"value":[1,1]},"mainOffset":{"type":14,"value":[0,0]},"diffuseColor":{"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"diffuseTexture":{"value":"white","type":29},"specularColor":{"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"specularTexture":{"value":"white","type":29},"emissiveColor":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveTexture":{"value":"white","type":29},"glossiness":{"type":13,"value":[10]},"normalTexture":{"value":"white","type":29}}},{"name":"shadowcast","stage":"shadowcast","program":"builtin-phong|shadow-map-vs|shadow-map-fs","rasterizerState":{"cullMode":1029},"depthStencilState":{"depthTest":true,"depthWrite":true}}]}]]],0,0,[],[],[]],[[[10,".bin",[[11,282,[12,9024],[[6,"a_normal",5126,3],[6,"a_position",5126,3],[6,"a_uv0",5126,2]]]],[[14,[0],[13,9024,1224]]],[1,-0.00999999977648258,-0.00999999977648258,-0.00666666962206364],[1,0.00999999977648258,0.00999999977648258,0.00666666962206364]],-1],0,0,[],[],[]],[[[18,"New Physics Material",0,0]],0,0,[],[],[]],[[[17,"YukaMaterial",[{},"0",11,[{"defines":{}},"props",11,[{},"diffuseColor",8,[4,4294967295]]]]]],0,0,[0],[4],[14]],[[[18,"Floor Physics Material ",0,0]],0,0,[],[],[]],[[[10,".bin",[[11,4,[12,128],[[6,"a_normal",5126,3],[6,"a_position",5126,3],[6,"a_uv0",5126,2]]]],[[14,[0],[13,128,12]]],[1,-0.5,-0.5,0],[1,0.5,0.5,0]],-1],0,0,[],[],[]],[[[10,".bin",[[11,282,[12,9024],[[6,"a_normal",5126,3],[6,"a_position",5126,3],[6,"a_uv0",5126,2]]]],[[14,[0],[13,9024,1224]]],[1,-0.00999999977648258,-0.00999999977648258,-0.00666666962206364],[1,0.00999999977648258,0.00999999977648258,0.00666666962206364]],-1],0,0,[],[],[]]]]